#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–≤–µ—Å—Ç–æ–≤
"""

import requests
import json
import time

def test_quest_generation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–≤–µ—Å—Ç–æ–≤ —Å –Ω–æ–≤—ã–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º"""
    
    print("üß™ [TEST] –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞...")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–≤–µ—Å—Ç–æ–≤ –¥–ª—è –≤—Å–µ—Ö –∫–ª–∞—Å—Å–æ–≤
    try:
        print("üì° [TEST] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ /quests/all...")
        start_time = time.time()
        
        response = requests.get("http://localhost:8000/quests/all?quest_count_per_class=1")
        
        end_time = time.time()
        execution_time = end_time - start_time
        
        print(f"‚è± [TEST] –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {execution_time:.2f} —Å–µ–∫—É–Ω–¥")
        print(f"üìä [TEST] –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            print("‚úÖ [TEST] –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã –∫–≤–µ—Å—Ç—ã!")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –∫–ª–∞—Å—Å
            classes = ["cook", "courier", "brewer", "blacksmith", "miner", "warrior"]
            total_quests = 0
            
            for cls in classes:
                quests = data.get(cls, [])
                quest_count = len(quests)
                total_quests += quest_count
                
                print(f"üìã [TEST] {cls}: {quest_count} –∫–≤–µ—Å—Ç–æ–≤")
                
                if quest_count > 0:
                    quest = quests[0]
                    print(f"   üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {quest.get('title', '–ù–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è')}")
                    print(f"   üéØ –¶–µ–ª—å: {quest.get('objective', {}).get('type', '–ù–µ—Ç —Ç–∏–ø–∞')} - {quest.get('objective', {}).get('target', '–ù–µ—Ç —Ü–µ–ª–∏')}")
                    print(f"   üèÜ –ù–∞–≥—Ä–∞–¥–∞: {quest.get('reward', {}).get('experience', 0)} –æ–ø—ã—Ç–∞")
                else:
                    print(f"   ‚ùå –ù–µ—Ç –∫–≤–µ—Å—Ç–æ–≤ –¥–ª—è –∫–ª–∞—Å—Å–∞ {cls}")
            
            print(f"üéØ [TEST] –ò–¢–û–ì–û: {total_quests} –∫–≤–µ—Å—Ç–æ–≤ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ")
            
            if total_quests >= 6:  # –ü–æ –æ–¥–Ω–æ–º—É –∫–≤–µ—Å—Ç—É –Ω–∞ –∫–ª–∞—Å—Å
                print("üéâ [TEST] –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù! –í—Å–µ –∫–ª–∞—Å—Å—ã –∏–º–µ—é—Ç –∫–≤–µ—Å—Ç—ã")
                return True
            else:
                print("‚ö†Ô∏è [TEST] –¢–ï–°–¢ –ß–ê–°–¢–ò–ß–ù–û –ü–†–û–ô–î–ï–ù: –ù–µ –≤—Å–µ –∫–ª–∞—Å—Å—ã –∏–º–µ—é—Ç –∫–≤–µ—Å—Ç—ã")
                return False
                
        else:
            print(f"‚ùå [TEST] –û–®–ò–ë–ö–ê: {response.status_code}")
            print(f"üìÑ [TEST] –û—Ç–≤–µ—Ç: {response.text}")
            return False
            
    except Exception as e:
        print(f"üî• [TEST] –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {str(e)}")
        return False

def test_single_class():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–≤–µ—Å—Ç–æ–≤ –¥–ª—è –æ–¥–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞"""
    
    print("\nüß™ [TEST] –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –¥–ª—è –æ–¥–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞ (cook)...")
    
    try:
        response = requests.get("http://localhost:8000/quests/cook?quest_count=1")
        
        if response.status_code == 200:
            data = response.json()
            quests = data.get("quests", [])
            
            if len(quests) > 0:
                quest = quests[0]
                print(f"‚úÖ [TEST] –ö–≤–µ—Å—Ç –¥–ª—è cook —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω:")
                print(f"   üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {quest.get('title', '–ù–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è')}")
                print(f"   üéØ –¶–µ–ª—å: {quest.get('objective', {}).get('type', '–ù–µ—Ç —Ç–∏–ø–∞')} - {quest.get('objective', {}).get('target', '–ù–µ—Ç —Ü–µ–ª–∏')}")
                return True
            else:
                print("‚ùå [TEST] –ö–≤–µ—Å—Ç –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω")
                return False
        else:
            print(f"‚ùå [TEST] –û–®–ò–ë–ö–ê: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"üî• [TEST] –û–®–ò–ë–ö–ê: {str(e)}")
        return False

if __name__ == "__main__":
    print("üöÄ [TEST] –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω
    try:
        health_response = requests.get("http://localhost:8000/")
        if health_response.status_code != 200:
            print("‚ùå [TEST] –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω! –ó–∞–ø—É—Å—Ç–∏—Ç–µ FastAPI —Å–µ—Ä–≤–µ—Ä —Å–Ω–∞—á–∞–ª–∞.")
            exit(1)
    except:
        print("‚ùå [TEST] –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É! –ó–∞–ø—É—Å—Ç–∏—Ç–µ FastAPI —Å–µ—Ä–≤–µ—Ä.")
        exit(1)
    
    print("‚úÖ [TEST] –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –¥–ª—è –≤—Å–µ—Ö –∫–ª–∞—Å—Å–æ–≤
    all_classes_success = test_quest_generation()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –¥–ª—è –æ–¥–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞
    single_class_success = test_single_class()
    
    print("\n" + "=" * 60)
    print("üìä [TEST] –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print(f"   –í—Å–µ –∫–ª–∞—Å—Å—ã: {'‚úÖ –ü–†–û–ô–î–ï–ù' if all_classes_success else '‚ùå –ù–ï –ü–†–û–ô–î–ï–ù'}")
    print(f"   –û–¥–∏–Ω –∫–ª–∞—Å—Å: {'‚úÖ –ü–†–û–ô–î–ï–ù' if single_class_success else '‚ùå –ù–ï –ü–†–û–ô–î–ï–ù'}")
    
    if all_classes_success and single_class_success:
        print("üéâ [TEST] –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
    else:
        print("‚ö†Ô∏è [TEST] –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–ô–î–ï–ù–´. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞.")