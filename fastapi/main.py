from fastapi import FastAPI, HTTPException, Request
from pydantic import BaseModel
from openai import OpenAI
import json
import re
import uuid
from typing import List, Dict, Optional
import time
from functools import lru_cache
from concurrent.futures import ThreadPoolExecutor
import asyncio
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

app = FastAPI()

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ health check —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞
@app.get("/")
async def health_check():
    return {"status": "ok"}

@app.middleware("http")
async def log_requests(request: Request, call_next):
    start_time = time.time()
    print(f"üì• [FastAPI] Incoming request: {request.method} {request.url}")
    print(f"üì• [FastAPI] Headers: {dict(request.headers)}")
    if request.method == "POST":
        body = await request.body()
        print(f"üì• [FastAPI] Request body: {body.decode('utf-8')}")
        async def receive():
            return {"type": "http.request", "body": body}
        request._receive = receive
    response = await call_next(request)
    process_time = time.time() - start_time
    print(f"üì§ [FastAPI] Response status: {response.status_code}, Time: {process_time:.2f}s")
    return response

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è OpenRouter API
API_KEY = os.getenv("API_KEY")

client = OpenAI(
    base_url="https://openrouter.ai/api/v1",
    api_key=API_KEY,
)

# –ö–ª–∞—Å—Å—ã –∏–≥—Ä–æ–∫–æ–≤ –∏ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ü–µ–ª–∏
CLASSES = ["cook", "courier", "brewer", "blacksmith", "miner", "warrior"]

OBJECTIVE_TYPES = {
    "cook": ["collect", "craft"],
    "courier": ["collect", "craft"],
    "brewer": ["collect", "craft"],
    "blacksmith": ["collect", "craft"],
    "miner": ["collect", "mine"],
    "warrior": ["kill", "collect"]
}

# –ó–∞–≥—Ä—É–∂–∞–µ–º targets –∏–∑ JSON —Ñ–∞–π–ª–∞
def load_targets_from_json():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç targets –∏–∑ target.json —Ñ–∞–π–ª–∞"""
    try:
        with open('target.json', 'r', encoding='utf-8') as f:
            targets_data = json.load(f)
            print(f"üìã [FastAPI] –ó–∞–≥—Ä—É–∂–µ–Ω–æ targets –∏–∑ target.json:")
            for class_name, targets in targets_data.items():
                print(f"  {class_name}: {len(targets)} –ø—Ä–µ–¥–º–µ—Ç–æ–≤")
            return targets_data
    except FileNotFoundError:
        print("‚ùå [FastAPI] –§–∞–π–ª target.json –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ targets")
        return get_default_targets()
    except json.JSONDecodeError as e:
        print(f"‚ùå [FastAPI] –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ target.json: {e}")
        return get_default_targets()

def get_default_targets():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ targets –∫–∞–∫ fallback"""
    return {
        "cook": ["minecraft:wheat", "minecraft:carrot", "minecraft:potato", "minecraft:beetroot", "minecraft:egg", "minecraft:milk_bucket", "minecraft:sugar", "minecraft:cocoa_beans", "minecraft:honey_bottle", "minecraft:bread", "minecraft:cake", "minecraft:cookie", "minecraft:pumpkin_pie", "minecraft:mushroom_stew", "minecraft:beetroot_soup", "minecraft:rabbit_stew", "minecraft:golden_carrot", "minecraft:golden_apple"],
        "courier": ["minecraft:paper", "minecraft:leather", "minecraft:feather", "minecraft:sugar", "minecraft:emerald", "minecraft:map", "minecraft:compass", "minecraft:saddle", "minecraft:boat", "minecraft:banner", "minecraft:firework_rocket"],
        "brewer": ["minecraft:nether_wart", "minecraft:blaze_powder", "minecraft:ghast_tear", "minecraft:spider_eye", "minecraft:magma_cream", "minecraft:glowstone_dust", "minecraft:redstone", "minecraft:rabbit_foot", "minecraft:glistering_melon_slice", "minecraft:pufferfish", "minecraft:turtle_helmet"],
        "blacksmith": ["minecraft:iron_ingot", "minecraft:gold_ingot", "minecraft:diamond", "minecraft:coal", "minecraft:flint", "minecraft:iron_sword", "minecraft:diamond_pickaxe", "minecraft:iron_axe", "minecraft:iron_armor", "minecraft:anvil", "minecraft:shield", "minecraft:crossbow"],
        "miner": ["minecraft:coal", "minecraft:iron_ore", "minecraft:gold_ore", "minecraft:diamond", "minecraft:redstone", "minecraft:lapis_lazuli", "minecraft:emerald", "minecraft:nether_quartz", "minecraft:ancient_debris", "minecraft:obsidian"],
        "warrior": ["minecraft:zombie", "minecraft:skeleton", "minecraft:creeper", "minecraft:spider", "minecraft:rotten_flesh", "minecraft:bone", "minecraft:gunpowder", "minecraft:string"]
    }

# –ó–∞–≥—Ä—É–∂–∞–µ–º targets –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
TARGETS = load_targets_from_json()

def get_random_targets_for_class(player_class, count=15):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–µ targets –¥–ª—è –∫–ª–∞—Å—Å–∞"""
    import random
    
    available_targets = TARGETS.get(player_class, [])
    if not available_targets:
        print(f"‚ùå [FastAPI] –ù–µ—Ç targets –¥–ª—è –∫–ª–∞—Å—Å–∞ {player_class}")
        return []
    
    # –ë–µ—Ä–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ targets (–Ω–µ –±–æ–ª—å—à–µ —á–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ)
    random_count = min(count, len(available_targets))
    selected_targets = random.sample(available_targets, random_count)
    
    print(f"üé≤ [FastAPI] –í—ã–±—Ä–∞–Ω–æ {len(selected_targets)} —Å–ª—É—á–∞–π–Ω—ã—Ö targets –¥–ª—è {player_class}:")
    for target in selected_targets:
        print(f"  - {target}")
    
    return selected_targets

# –ú–æ–¥–µ–ª—å –¥–ª—è –æ—Ç–≤–µ—Ç–∞ API
class Quest(BaseModel):
    id: str
    playerClass: str
    level: int
    title: str
    description: str
    objective: Dict
    timeLimit: int
    reward: Dict

class QuestsResponse(BaseModel):
    quests: List[Quest]

class AllQuestsResponse(BaseModel):
    cook: List[Quest]
    courier: List[Quest]
    brewer: List[Quest]
    blacksmith: List[Quest]
    miner: List[Quest]
    warrior: List[Quest]

# –ü—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö –∫–≤–µ—Å—Ç–æ–≤ (–ù–ï –∫—ç—à–∏—Ä—É–µ–º, —Ç–∞–∫ –∫–∞–∫ targets –º–µ–Ω—è—é—Ç—Å—è)
def get_all_quests_prompt(quest_count_per_class: int = 5) -> str:
    # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ targets –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª–∞—Å—Å–∞
    class_targets = {}
    for cls in CLASSES:
        class_targets[cls] = get_random_targets_for_class(cls, 15)
    
    return f"""Generate {quest_count_per_class} quests for EACH of the following Minecraft classes: {', '.join(CLASSES)}.

Return a JSON with separate arrays for each class. Each quest must have a unique ID, be in Russian, and strictly follow the structure below. Use ONLY the provided objective types and targets for each class, and NEVER use 'minecraft:air' or any invalid targets.

Return format:
{{{', '.join([f'"{cls}": [{quest_count_per_class} quests for {cls} class]' for cls in CLASSES])}}}

Quest structure for each:
{{
  "id": "class_target_level",
  "playerClass": "origins:class_name",
  "level": <1-3>,
  "title": "<Russian title>",
  "description": "<Russian description>",
  "objective": {{
    "type": "<objective_type>",
    "target": "<target>",
    "amount": <1-20>
  }},
  "timeLimit": <20-50>,
  "reward": {{
    "type": "skill_point_token",
    "tier": <1-3>,
    "experience": <500-1500>
  }}
}}

Class objectives and targets (use ONLY these, no exceptions):
{chr(10).join([f"- {cls}: objective types {OBJECTIVE_TYPES[cls]}, targets {class_targets[cls]}" for cls in CLASSES])}

Return ONLY the JSON, no additional text."""

# –ü—Ä–æ–º–ø—Ç –¥–ª—è –æ–¥–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞ (–ù–ï –∫—ç—à–∏—Ä—É–µ–º, —Ç–∞–∫ –∫–∞–∫ targets –º–µ–Ω—è—é—Ç—Å—è)
def get_quests_prompt(player_class: str, quest_count: int) -> str:
    # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ targets –¥–ª—è —ç—Ç–æ–≥–æ –∫–ª–∞—Å—Å–∞
    random_targets = get_random_targets_for_class(player_class, 15)
    
    return f"""Generate {quest_count} quests for the Minecraft class "{player_class}" in JSON format, compatible with the following structure. Ensure the quests are unique, have a level from 1 to 3, and use ONLY the provided objective types and targets. The title and description must be in Russian, creative, and match the class theme. Do not include a separate localization file; title and description are in the JSON. Use the provided template and valid values. NEVER use 'minecraft:air' or any invalid targets.

Template:
{{
  "quests": [
    {{
      "id": "class_target_level",
      "playerClass": "origins:{player_class}",
      "level": <1-3>,
      "title": "<Russian title>",
      "description": "<Russian description>",
      "objective": {{
        "type": "<objective_type>",
        "target": "<target>",
        "amount": <1-20>
      }},
      "timeLimit": <20-50>,
      "reward": {{
        "type": "skill_point_token",
        "tier": <1-3>,
        "experience": <500-1500>
      }}
    }}
  ]
}}

Valid objective types: {', '.join(OBJECTIVE_TYPES[player_class])}
Valid targets: {random_targets}

Return ONLY the JSON, no additional text."""

def validate_quest_structure(quest):
    """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–≤–µ—Å—Ç–∞"""
    required_fields = ["id", "playerClass", "level", "title", "description", "objective", "timeLimit", "reward"]
    if not all(key in quest for key in required_fields):
        return False
    
    if not all(key in quest["objective"] for key in ["type", "target", "amount"]):
        return False
    
    if not all(key in quest["reward"] for key in ["type", "tier", "experience"]):
        return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ target –Ω–µ "minecraft:air" –∏ –≤—Ö–æ–¥–∏—Ç –≤ —Å–ø–∏—Å–æ–∫ TARGETS –¥–ª—è –∫–ª–∞—Å—Å–∞
    player_class = quest["playerClass"].split(":")[1]
    target = quest["objective"]["target"]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ target –Ω–µ air
    if "air" in target.lower():
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ target –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è –∫–ª–∞—Å—Å–∞
    available_targets = TARGETS.get(player_class, [])
    if target not in available_targets:
        print(f"‚ùå [Validation] Target '{target}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –¥–ª—è –∫–ª–∞—Å—Å–∞ {player_class}")
        return False
    
    return True

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–∞—Å—Ç–∏—á–Ω–æ –ø–æ–≤—Ä–µ–∂–¥—ë–Ω–Ω–æ–≥–æ JSON
def extract_valid_quests(generated_text: str) -> List[dict]:
    valid_quests = []
    try:
        json_match = re.search(r'\{.*"quests":\s*\[(.*?)\].*}', generated_text, re.DOTALL)
        if json_match:
            quests_str = f'{{"quests": [{json_match.group(1)}]}}'
            try:
                generated_json = json.loads(quests_str)
                quests = generated_json.get("quests", [])
                for quest in quests:
                    if validate_quest_structure(quest):
                        quest["id"] = f"{quest.get('playerClass').split(':')[1]}_{uuid.uuid4().hex[:8]}"
                        valid_quests.append(quest)
            except json.JSONDecodeError:
                pass
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –≤–∞–ª–∏–¥–Ω—ã—Ö –∫–≤–µ—Å—Ç–æ–≤: {str(e)}")
    
    return valid_quests

# –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∫–≤–µ—Å—Ç–æ–≤
@app.get("/quests/all", response_model=AllQuestsResponse)
async def get_all_quests(quest_count_per_class: int = 5):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–≤–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∫–ª–∞—Å—Å–æ–≤ –∑–∞ –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º."""
    if quest_count_per_class < 1 or quest_count_per_class > 10:
        raise HTTPException(status_code=400, detail="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–≤–µ—Å—Ç–æ–≤ –Ω–∞ –∫–ª–∞—Å—Å –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 10")
    
    start_time = time.time()
    print(f"üåê [FastAPI] –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ OpenRouter –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ {quest_count_per_class} –∫–≤–µ—Å—Ç–æ–≤ –Ω–∞ –∫–ª–∞—Å—Å...")
    
    prompt = get_all_quests_prompt(quest_count_per_class)
    
    try:
        loop = asyncio.get_event_loop()
        with ThreadPoolExecutor(max_workers=1) as executor:
            completion = await loop.run_in_executor(
                executor,
                lambda: client.chat.completions.create(
                    extra_headers={
                        "HTTP-Referer": "http://localhost:8000",
                        "X-Title": "Minecraft All Quests Generator"
                    },
                    extra_body={},
                    model="deepseek/deepseek-r1:free",
                    messages=[{"role": "user", "content": prompt}]
                )
            )
        
        generated_text = completion.choices[0].message.content
        result = {}
        
        for cls in CLASSES:
            json_match = re.search(rf'"{cls}":\s*\[(.*?)\]', generated_text, re.DOTALL)
            if json_match:
                quests_str = f'{{"{cls}": [{json_match.group(1)}]}}'
                try:
                    generated_json = json.loads(quests_str)
                    class_quests = generated_json.get(cls, [])
                    valid_quests = []
                    for quest in class_quests[:quest_count_per_class]:
                        if validate_quest_structure(quest):
                            quest["id"] = f"{cls}_{uuid.uuid4().hex[:8]}"
                            valid_quests.append(quest)
                    result[cls] = valid_quests
                except json.JSONDecodeError:
                    result[cls] = []
            else:
                result[cls] = []
        
        if not any(result.values()):
            raise HTTPException(status_code=500, detail="–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∞–ª–∏–¥–Ω—ã–µ –∫–≤–µ—Å—Ç—ã")
        
        end_time = time.time()
        execution_time = end_time - start_time
        print(f"‚è± –í—Å–µ –∫–≤–µ—Å—Ç—ã (deepseek/deepseek-r1-0528:free): {execution_time:.2f} —Å–µ–∫—É–Ω–¥")
        
        return AllQuestsResponse(**result)
    
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–≤–µ—Å—Ç–æ–≤: {str(e)}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–≤–µ—Å—Ç–æ–≤: {str(e)}")

# –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–≤–µ—Å—Ç–æ–≤
@app.get("/quests/{player_class}", response_model=QuestsResponse)
async def get_quests(player_class: str, quest_count: int = 5):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–≤–µ—Å—Ç—ã –¥–ª—è –æ–¥–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫."""
    if player_class not in CLASSES:
        raise HTTPException(status_code=404, detail="–ö–ª–∞—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    if quest_count < 1 or quest_count > 10:
        raise HTTPException(status_code=400, detail="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–≤–µ—Å—Ç–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 10")
    
    start_time = time.time()
    print(f"üåê [FastAPI] –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ OpenRouter –¥–ª—è –∫–ª–∞—Å—Å–∞ {player_class} ({quest_count} –∫–≤–µ—Å—Ç–æ–≤)...")
    
    prompt = get_quests_prompt(player_class, quest_count)
    
    try:
        loop = asyncio.get_event_loop()
        with ThreadPoolExecutor(max_workers=2) as executor:
            completion = await loop.run_in_executor(
                executor,
                lambda: client.chat.completions.create(
                    extra_headers={
                        "HTTP-Referer": "http://localhost:8000",
                        "X-Title": f"Minecraft Quest Generator - {player_class}"
                    },
                    extra_body={},
                    model="deepseek/deepseek-r1:free",
                    messages=[{"role": "user", "content": prompt}]
                )
            )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ API –≤–µ—Ä–Ω—É–ª –æ—Ç–≤–µ—Ç
        if not completion.choices or len(completion.choices) == 0:
            raise HTTPException(status_code=500, detail="API –Ω–µ –≤–µ—Ä–Ω—É–ª –æ—Ç–≤–µ—Ç")
        
        generated_text = completion.choices[0].message.content
        if not generated_text:
            raise HTTPException(status_code=500, detail="API –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç")
            
        print(f"üìù [FastAPI] –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç AI ({len(generated_text)} —Å–∏–º–≤–æ–ª–æ–≤)")
        valid_quests = extract_valid_quests(generated_text)
        
        if not valid_quests:
            raise HTTPException(status_code=500, detail="–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∞–ª–∏–¥–Ω—ã–µ –∫–≤–µ—Å—Ç—ã")
        
        valid_quests = valid_quests[:quest_count]
        
        end_time = time.time()
        execution_time = end_time - start_time
        print(f"‚è± {player_class} (deepseek/deepseek-r1-0528:free): {execution_time:.2f} —Å–µ–∫—É–Ω–¥")
        
        return QuestsResponse(quests=valid_quests)
    
    except HTTPException as http_err:
        raise http_err
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–≤–µ—Å—Ç–æ–≤ –¥–ª—è {player_class}: {str(e)}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–≤–µ—Å—Ç–æ–≤: {str(e)}")

# –ú–æ–¥–µ–ª—å –¥–ª—è —á–∞—Ç–∞

class ChatRequest(BaseModel):
    question: str
    minecraft_version: str = "1.20.1"
    context: Optional[str] = None

class ChatResponse(BaseModel):
    answer: str
    success: bool
    error_message: Optional[str] = None
    response_type: str = "general"

def build_minecraft_chat_prompt(question: str, version: str, context: Optional[str] = None) -> str:
    base_prompt = f"""
–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ Minecraft –≤–µ—Ä—Å–∏–∏ {version}. –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –∫—Ä–∞—Ç–∫–æ –∏ —Ç–æ—á–Ω–æ.

–í–ê–ñ–ù–´–ï –ü–†–ê–í–ò–õ–ê:
- –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫—Ä–∞—Ç–∫–∏–º (–Ω–µ –±–æ–ª–µ–µ 200 —Å–ª–æ–≤)
- –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∞–∫—Ç—É–∞–ª—å–Ω—É—é –¥–ª—è –≤–µ—Ä—Å–∏–∏ {version}
- –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –∫–∞—Å–∞–µ—Ç—Å—è –∫—Ä–∞—Ñ—Ç–∞, –ø–æ–∫–∞–∂–∏ —Ä–µ—Ü–µ–ø—Ç –≤ –ø–æ–Ω—è—Ç–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
- –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –æ –º–µ—Ö–∞–Ω–∏–∫–∞—Ö –∏–≥—Ä—ã, –æ–±—ä—è—Å–Ω–∏ –ø—Ä–æ—Å—Ç–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ
- –ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—à—å —Ç–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞, —á–µ—Å—Ç–Ω–æ —Å–∫–∞–∂–∏ –æ–± —ç—Ç–æ–º

–í–æ–ø—Ä–æ—Å –∏–≥—Ä–æ–∫–∞: {question}
"""
    if context:
        base_prompt += f"\n–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç: {context}"
    return base_prompt

def determine_response_type(question: str) -> str:
    question_lower = question.lower()
    if any(word in question_lower for word in ["–∫—Ä–∞—Ñ—Ç", "—Ä–µ—Ü–µ–ø—Ç", "–∫–∞–∫ —Å–¥–µ–ª–∞—Ç—å", "–∫–∞–∫ —Å–æ–∑–¥–∞—Ç—å", "–∫–∞–∫ —Å–∫—Ä–∞—Ñ—Ç–∏—Ç—å"]):
        return "recipe"
    elif any(word in question_lower for word in ["–º–µ—Ö–∞–Ω–∏–∫–∞", "–∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç", "–ø—Ä–∏–Ω—Ü–∏–ø", "—Å–∏—Å—Ç–µ–º–∞"]):
        return "mechanic"
    else:
        return "general"

# –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —á–∞—Ç–∞
@app.post("/chat/ask", response_model=ChatResponse)
async def ask_question(request: ChatRequest):
    try:
        print(f"ü§ñ [ChatAPI] –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å: {request}")
        print(f"ü§ñ [ChatAPI] –ü–æ–ª—É—á–µ–Ω –≤–æ–ø—Ä–æ—Å: {request.question}")
        print(f"üìã [ChatAPI] –í–µ—Ä—Å–∏—è Minecraft: {request.minecraft_version}")
        print(f"üìã [ChatAPI] –ö–æ–Ω—Ç–µ–∫—Å—Ç: {request.context}")
        if not request.question or len(request.question.strip()) == 0:
            raise HTTPException(status_code=400, detail="–í–æ–ø—Ä–æ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        if len(request.question) > 2000:
            raise HTTPException(status_code=400, detail="–í–æ–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º 2000 —Å–∏–º–≤–æ–ª–æ–≤)")
        response_type = determine_response_type(request.question)
        print(f"üîç [ChatAPI] –¢–∏–ø –æ—Ç–≤–µ—Ç–∞: {response_type}")
        prompt = build_minecraft_chat_prompt(request.question, request.minecraft_version, request.context)
        start_time = time.time()
        print(f"üìù [ChatAPI] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ AI –º–æ–¥–µ–ª–∏...")
        loop = asyncio.get_event_loop()
        with ThreadPoolExecutor(max_workers=1) as executor:
            completion = await loop.run_in_executor(
                executor,
                lambda: client.chat.completions.create(
                    extra_headers={"HTTP-Referer": "http://localhost:8000", "X-Title": "Minecraft Chat Assistant"},
                    extra_body={},
                    model="deepseek/deepseek-r1-0528:free",
                    messages=[{"role": "user", "content": prompt}]
                )
            )
        answer = completion.choices[0].message.content.strip()
        end_time = time.time()
        execution_time = end_time - start_time
        print(f"‚úÖ [ChatAPI] –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç AI ({len(answer)} —Å–∏–º–≤–æ–ª–æ–≤)")
        print(f"‚è± [ChatAPI] –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {execution_time:.2f} —Å–µ–∫—É–Ω–¥")
        print(f"üí¨ [ChatAPI] –û—Ç–≤–µ—Ç: {answer[:100]}...")
        print(f"üìè [ChatAPI] –î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞: {len(answer)} —Å–∏–º–≤–æ–ª–æ–≤")
        return ChatResponse(answer=answer, success=True, response_type=response_type)
    except HTTPException as http_err:
        print(f"‚ùå [ChatAPI] HTTP –æ—à–∏–±–∫–∞: {http_err.detail}")
        raise http_err
    except Exception as e:
        error_message = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–æ–ø—Ä–æ—Å–∞: {str(e)}"
        print(f"üî• [ChatAPI] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {error_message}")
        return ChatResponse(
            answer="–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            success=False,
            error_message=error_message,
            response_type="error"
        )

# –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –∫–≤–µ—Å—Ç–æ–≤ (–¥–ª—è –∫–æ–º–∞–Ω–¥—ã /quest_api reload)
@app.post("/quest_api/reload")
async def reload_quest_api():
    """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ API –∫–≤–µ—Å—Ç–æ–≤."""
    global TARGETS
    
    print("\n" + "="*60)
    print("üîÑ [RELOAD] –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ Quest API...")
    print("="*60)
    
    # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º targets –∏–∑ JSON —Ñ–∞–π–ª–∞
    TARGETS = load_targets_from_json()
    
    print("‚úÖ Targets –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ target.json")
    print("‚úÖ Quest API –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω")
    print("="*60 + "\n")
    
    return {"status": "reloaded", "message": "Quest API —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω, targets –æ–±–Ω–æ–≤–ª–µ–Ω—ã"}

@app.get("/quest_api/reload")
async def reload_quest_api_get():
    """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ API –∫–≤–µ—Å—Ç–æ–≤ (GET –≤–µ—Ä—Å–∏—è)."""
    return await reload_quest_api()