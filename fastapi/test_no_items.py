#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –∫–≤–µ—Å—Ç–æ–≤ –±–µ–∑ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ - —Ç–æ–ª—å–∫–æ –æ–ø—ã—Ç
"""

import requests
import json

def test_quest_generation_no_items():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–≤–µ—Å—Ç–æ–≤ –±–µ–∑ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ –Ω–∞–≥—Ä–∞–¥–∞—Ö"""
    
    print("üß™ [TEST] –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –∫–≤–µ—Å—Ç–æ–≤ –±–µ–∑ –ø—Ä–µ–¥–º–µ—Ç–æ–≤...")
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –¥–ª—è –≤—Å–µ—Ö –∫–ª–∞—Å—Å–æ–≤
        response = requests.get("http://localhost:8000/quests/all?quest_count_per_class=1")
        
        if response.status_code == 200:
            data = response.json()
            print("‚úÖ [TEST] –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã –∫–≤–µ—Å—Ç—ã!")
            
            classes = ["cook", "courier", "brewer", "blacksmith", "miner", "warrior"]
            all_valid = True
            
            for cls in classes:
                quests = data.get(cls, [])
                if len(quests) > 0:
                    quest = quests[0]
                    reward = quest.get("reward", {})
                    
                    print(f"üìã [TEST] {cls}:")
                    print(f"   üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {quest.get('title', '–ù–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è')}")
                    print(f"   üéØ –¶–µ–ª—å: {quest.get('objective', {}).get('type', '–ù–µ—Ç —Ç–∏–ø–∞')} - {quest.get('objective', {}).get('target', '–ù–µ—Ç —Ü–µ–ª–∏')}")
                    print(f"   üèÜ –ù–∞–≥—Ä–∞–¥–∞: tier {reward.get('tier', 0)}, {reward.get('experience', 0)} –æ–ø—ã—Ç–∞")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ—Ç –ø–æ–ª—è items
                    if "items" in reward:
                        print(f"   ‚ùå –û–®–ò–ë–ö–ê: –ù–∞–π–¥–µ–Ω—ã –ø—Ä–µ–¥–º–µ—Ç—ã –≤ –Ω–∞–≥—Ä–∞–¥–µ!")
                        all_valid = False
                    else:
                        print(f"   ‚úÖ –ù–∞–≥—Ä–∞–¥–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –æ–ø—ã—Ç")
                        
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
                    required_reward_fields = ["type", "tier", "experience"]
                    missing_fields = [field for field in required_reward_fields if field not in reward]
                    if missing_fields:
                        print(f"   ‚ùå –û–®–ò–ë–ö–ê: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è –≤ reward: {missing_fields}")
                        all_valid = False
                    else:
                        print(f"   ‚úÖ –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
                else:
                    print(f"‚ùå [TEST] –ù–µ—Ç –∫–≤–µ—Å—Ç–æ–≤ –¥–ª—è –∫–ª–∞—Å—Å–∞ {cls}")
                    all_valid = False
            
            if all_valid:
                print("üéâ [TEST] –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –ø—Ä–µ–¥–º–µ—Ç–æ–≤.")
                return True
            else:
                print("‚ö†Ô∏è [TEST] –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–ô–î–ï–ù–´.")
                return False
                
        else:
            print(f"‚ùå [TEST] –û–®–ò–ë–ö–ê HTTP: {response.status_code}")
            print(f"üìÑ [TEST] –û—Ç–≤–µ—Ç: {response.text}")
            return False
            
    except Exception as e:
        print(f"üî• [TEST] –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {str(e)}")
        return False

def test_fallback_quests():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç fallback –∫–≤–µ—Å—Ç—ã"""
    
    print("\nüß™ [TEST] –¢–µ—Å—Ç–∏—Ä—É–µ–º fallback –∫–≤–µ—Å—Ç—ã...")
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ main.py
    import sys
    sys.path.append('.')
    from main import get_fallback_quests
    
    fallback_quests = get_fallback_quests()
    
    all_valid = True
    for cls, quests in fallback_quests.items():
        if len(quests) > 0:
            quest = quests[0]
            reward = quest.get("reward", {})
            
            print(f"üìã [TEST] Fallback {cls}:")
            print(f"   üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {quest.get('title', '–ù–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è')}")
            print(f"   üèÜ –ù–∞–≥—Ä–∞–¥–∞: tier {reward.get('tier', 0)}, {reward.get('experience', 0)} –æ–ø—ã—Ç–∞")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ—Ç –ø–æ–ª—è items
            if "items" in reward:
                print(f"   ‚ùå –û–®–ò–ë–ö–ê: –ù–∞–π–¥–µ–Ω—ã –ø—Ä–µ–¥–º–µ—Ç—ã –≤ fallback –Ω–∞–≥—Ä–∞–¥–µ!")
                all_valid = False
            else:
                print(f"   ‚úÖ Fallback –Ω–∞–≥—Ä–∞–¥–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –æ–ø—ã—Ç")
    
    if all_valid:
        print("‚úÖ [TEST] Fallback –∫–≤–µ—Å—Ç—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã!")
        return True
    else:
        print("‚ùå [TEST] Fallback –∫–≤–µ—Å—Ç—ã —Å–æ–¥–µ—Ä–∂–∞—Ç –æ—à–∏–±–∫–∏!")
        return False

if __name__ == "__main__":
    print("üöÄ [TEST] –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –±–µ–∑ –ø—Ä–µ–¥–º–µ—Ç–æ–≤")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞
    try:
        health_response = requests.get("http://localhost:8000/")
        if health_response.status_code != 200:
            print("‚ùå [TEST] –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω! –ó–∞–ø—É—Å—Ç–∏—Ç–µ FastAPI —Å–µ—Ä–≤–µ—Ä —Å–Ω–∞—á–∞–ª–∞.")
            exit(1)
    except:
        print("‚ùå [TEST] –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É! –ó–∞–ø—É—Å—Ç–∏—Ç–µ FastAPI —Å–µ—Ä–≤–µ—Ä.")
        exit(1)
    
    print("‚úÖ [TEST] –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–≤–µ—Å—Ç–æ–≤
    generation_success = test_quest_generation_no_items()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º fallback –∫–≤–µ—Å—Ç—ã
    fallback_success = test_fallback_quests()
    
    print("\n" + "=" * 60)
    print("üìä [TEST] –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print(f"   –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–≤–µ—Å—Ç–æ–≤: {'‚úÖ –ü–†–û–ô–î–ï–ù' if generation_success else '‚ùå –ù–ï –ü–†–û–ô–î–ï–ù'}")
    print(f"   Fallback –∫–≤–µ—Å—Ç—ã: {'‚úÖ –ü–†–û–ô–î–ï–ù' if fallback_success else '‚ùå –ù–ï –ü–†–û–ô–î–ï–ù'}")
    
    if generation_success and fallback_success:
        print("üéâ [TEST] –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –°–∏—Å—Ç–µ–º–∞ –∫–≤–µ—Å—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å –æ–ø—ã—Ç–æ–º.")
    else:
        print("‚ö†Ô∏è [TEST] –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–ô–î–ï–ù–´. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞.")