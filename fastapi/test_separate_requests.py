#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–∏ —Å –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏ –∫ API
"""

import asyncio
import aiohttp
import time
import json

API_BASE_URL = "http://localhost:8000"
CLASSES = ["cook", "courier", "brewer", "blacksmith", "miner", "warrior"]

async def test_single_class_request(session, player_class, quest_count=5):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å –∫–≤–µ—Å—Ç–æ–≤ –¥–ª—è –æ–¥–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞"""
    url = f"{API_BASE_URL}/quests/{player_class}?quest_count={quest_count}"
    
    print(f"üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –∫–ª–∞—Å—Å–∞ {player_class}...")
    start_time = time.time()
    
    try:
        async with session.get(url) as response:
            end_time = time.time()
            execution_time = end_time - start_time
            
            if response.status == 200:
                data = await response.json()
                quest_count = len(data.get("quests", []))
                print(f"‚úÖ {player_class}: {quest_count} –∫–≤–µ—Å—Ç–æ–≤ –∑–∞ {execution_time:.2f}s")
                return player_class, quest_count, execution_time, True
            else:
                error_text = await response.text()
                print(f"‚ùå {player_class}: –û—à–∏–±–∫–∞ {response.status} –∑–∞ {execution_time:.2f}s")
                print(f"   –û—à–∏–±–∫–∞: {error_text[:100]}...")
                return player_class, 0, execution_time, False
                
    except Exception as e:
        end_time = time.time()
        execution_time = end_time - start_time
        print(f"üî• {player_class}: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –∑–∞ {execution_time:.2f}s - {str(e)}")
        return player_class, 0, execution_time, False

async def test_all_classes_separately():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –≤—Å–µ—Ö –∫–ª–∞—Å—Å–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ"""
    print("=" * 60)
    print("üåê –¢–ï–°–¢: –û—Ç–¥–µ–ª—å–Ω—ã–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –≤—Å–µ—Ö –∫–ª–∞—Å—Å–æ–≤")
    print("=" * 60)
    
    start_time = time.time()
    
    async with aiohttp.ClientSession() as session:
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –≤—Å–µ—Ö –∫–ª–∞—Å—Å–æ–≤
        tasks = []
        for player_class in CLASSES:
            task = test_single_class_request(session, player_class, 5)
            tasks.append(task)
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
        results = await asyncio.gather(*tasks)
    
    end_time = time.time()
    total_time = end_time - start_time
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    successful_classes = 0
    total_quests = 0
    failed_classes = []
    
    print("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    print("-" * 40)
    
    for class_name, quest_count, exec_time, success in results:
        if success:
            successful_classes += 1
            total_quests += quest_count
        else:
            failed_classes.append(class_name)
    
    print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤: {successful_classes}/{len(CLASSES)}")
    print(f"üéØ –í—Å–µ–≥–æ –∫–≤–µ—Å—Ç–æ–≤: {total_quests}")
    print(f"‚è± –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time:.2f}s")
    
    if failed_classes:
        print(f"‚ùå –ù–µ—É–¥–∞—á–Ω—ã–µ –∫–ª–∞—Å—Å—ã: {', '.join(failed_classes)}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –Ω–µ—É–¥–∞—á–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤
        if failed_classes:
            print(f"\nüîÑ –ü–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –Ω–µ—É–¥–∞—á–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤...")
            await test_retry_failed_classes(failed_classes)
    
    print("=" * 60)
    return successful_classes, total_quests, total_time

async def test_retry_failed_classes(failed_classes):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –Ω–µ—É–¥–∞—á–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤"""
    print("üîÑ –ü–û–í–¢–û–†–ù–´–ï –ó–ê–ü–†–û–°–´:")
    print("-" * 30)
    
    async with aiohttp.ClientSession() as session:
        retry_tasks = []
        for player_class in failed_classes:
            task = test_single_class_request(session, player_class, 5)
            retry_tasks.append(task)
        
        retry_results = await asyncio.gather(*retry_tasks)
    
    retry_successful = 0
    retry_total_quests = 0
    
    for class_name, quest_count, exec_time, success in retry_results:
        if success:
            retry_successful += 1
            retry_total_quests += quest_count
    
    print(f"‚úÖ –ü–æ–≤—Ç–æ—Ä–Ω–æ —É—Å–ø–µ—à–Ω—ã—Ö: {retry_successful}/{len(failed_classes)}")
    print(f"üéØ –ö–≤–µ—Å—Ç–æ–≤ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–µ: {retry_total_quests}")

async def test_api_health():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API"""
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(f"{API_BASE_URL}/") as response:
                if response.status == 200:
                    print("‚úÖ API —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω")
                    return True
                else:
                    print(f"‚ùå API —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (—Å—Ç–∞—Ç—É—Å: {response.status})")
                    return False
    except Exception as e:
        print(f"üî• –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {str(e)}")
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ù–û–í–û–ô –õ–û–ì–ò–ö–ò –° –û–¢–î–ï–õ–¨–ù–´–ú–ò –ó–ê–ü–†–û–°–ê–ú–ò")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
    if not await test_api_health():
        print("‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ")
        return
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    successful, total_quests, total_time = await test_all_classes_separately()
    
    # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    print("\nüéØ –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print("=" * 40)
    print(f"–£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {successful}/{len(CLASSES)} –∫–ª–∞—Å—Å–æ–≤ ({successful/len(CLASSES)*100:.1f}%)")
    print(f"–í—Å–µ–≥–æ –∫–≤–µ—Å—Ç–æ–≤: {total_quests}")
    print(f"–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ –∫–ª–∞—Å—Å: {total_time/len(CLASSES):.2f}s")
    print(f"–û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time:.2f}s")
    
    if successful == len(CLASSES):
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏")

if __name__ == "__main__":
    asyncio.run(main())