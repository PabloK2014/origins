package io.github.apace100.origins.command;

import com.mojang.brigadier.CommandDispatcher;
import com.mojang.brigadier.arguments.IntegerArgumentType;
import com.mojang.brigadier.arguments.StringArgumentType;
import com.mojang.brigadier.context.CommandContext;
import io.github.apace100.origins.quest.QuestApiChatLogger;
import io.github.apace100.origins.quest.QuestApiManager;
import net.minecraft.command.CommandRegistryAccess;
import net.minecraft.server.command.CommandManager;
import net.minecraft.server.command.ServerCommandSource;
import net.minecraft.server.world.ServerWorld;
import net.minecraft.text.Text;
import net.minecraft.util.Formatting;

/**
 * –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Quest API
 */
public class TestQuestApiCommand {
    
    public static void register(CommandDispatcher<ServerCommandSource> dispatcher, CommandRegistryAccess registryAccess) {
        dispatcher.register(CommandManager.literal("quest_api")
            .requires(source -> source.hasPermissionLevel(2))
            .then(CommandManager.literal("test")
                .then(CommandManager.argument("class", StringArgumentType.string())
                    .executes(context -> testApiForClass(context, StringArgumentType.getString(context, "class"), 10))
                    .then(CommandManager.argument("count", IntegerArgumentType.integer(1, 10))
                        .executes(context -> testApiForClass(context, 
                            StringArgumentType.getString(context, "class"),
                            IntegerArgumentType.getInteger(context, "count"))))))
            .then(CommandManager.literal("status")
                .executes(TestQuestApiCommand::checkApiStatus))
            .then(CommandManager.literal("reload")
                .executes(TestQuestApiCommand::reloadAllQuests))
            .then(CommandManager.literal("reload_class")
                .then(CommandManager.argument("class", StringArgumentType.string())
                    .executes(context -> reloadClassQuests(context, StringArgumentType.getString(context, "class")))))
            .then(CommandManager.literal("clear_cache")
                .executes(TestQuestApiCommand::clearCache))
            .then(CommandManager.literal("test_parse")
                .executes(TestQuestApiCommand::testJsonParsing))
            .then(CommandManager.literal("raw_json")
                .executes(TestQuestApiCommand::getRawJson))
            .then(CommandManager.literal("debug_cache")
                .executes(TestQuestApiCommand::debugCache))
        );
    }
    
    /**
     * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç API –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞
     */
    private static int testApiForClass(CommandContext<ServerCommandSource> context, String playerClass, int questCount) {
        ServerCommandSource source = context.getSource();
        
        try {
            ServerWorld world = source.getWorld();
            QuestApiManager manager = QuestApiManager.getInstance();
            
            source.sendFeedback(() -> Text.literal("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º API –¥–ª—è –∫–ª–∞—Å—Å–∞: " + playerClass + " (–∫–≤–µ—Å—Ç–æ–≤: " + questCount + ")")
                .formatted(Formatting.YELLOW), true);
            
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–≤–µ—Å—Ç—ã –¥–ª—è –∫–ª–∞—Å—Å–∞
            manager.forceUpdateClass(playerClass, world);
            
            source.sendFeedback(() -> Text.literal("‚úÖ –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á–∞—Ç –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.")
                .formatted(Formatting.GREEN), true);
            
            return 1;
        } catch (Exception e) {
            source.sendError(Text.literal("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ API: " + e.getMessage()));
            return 0;
        }
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å API
     */
    private static int checkApiStatus(CommandContext<ServerCommandSource> context) {
        ServerCommandSource source = context.getSource();
        QuestApiManager manager = QuestApiManager.getInstance();
        
        boolean isAvailable = manager.isApiAvailable();
        
        if (isAvailable) {
            source.sendFeedback(() -> Text.literal("üü¢ Quest API: –ü–û–î–ö–õ–Æ–ß–ï–ù")
                .formatted(Formatting.GREEN), false);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–≤–µ—Å—Ç–∞—Ö
            for (String playerClass : manager.getAvailableClasses()) {
                int questCount = manager.getQuestsForClass(playerClass).size();
                int minutesUntilUpdate = manager.getMinutesUntilNextUpdate(playerClass);
                
                source.sendFeedback(() -> Text.literal("  üìã " + playerClass + ": " + questCount + " –∫–≤–µ—Å—Ç–æ–≤")
                    .formatted(Formatting.AQUA)
                    .append(Text.literal(" (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ " + minutesUntilUpdate + " –º–∏–Ω)")
                        .formatted(Formatting.GRAY)), false);
            }
        } else {
            source.sendFeedback(() -> Text.literal("üî¥ Quest API: –ù–ï–î–û–°–¢–£–ü–ï–ù")
                .formatted(Formatting.RED), false);
            source.sendFeedback(() -> Text.literal("  –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ FastAPI —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ localhost:8000")
                .formatted(Formatting.GRAY), false);
        }
        
        return 1;
    }
    
    /**
     * –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç –∫–≤–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∫–ª–∞—Å—Å–æ–≤
     */
    private static int reloadAllQuests(CommandContext<ServerCommandSource> context) {
        ServerCommandSource source = context.getSource();
        
        try {
            ServerWorld world = source.getWorld();
            QuestApiManager manager = QuestApiManager.getInstance();
            
            source.sendFeedback(() -> Text.literal("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∫–≤–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∫–ª–∞—Å—Å–æ–≤...")
                .formatted(Formatting.YELLOW), true);
            
            QuestApiChatLogger.logQuestUpdate(world.getServer());
            
            for (String playerClass : manager.getAvailableClasses()) {
                manager.forceUpdateClass(playerClass, world);
            }
            
            source.sendFeedback(() -> Text.literal("‚úÖ –ó–∞–ø—Ä–æ—Å—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á–∞—Ç –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.")
                .formatted(Formatting.GREEN), true);
            
            return 1;
        } catch (Exception e) {
            source.sendError(Text.literal("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ –∫–≤–µ—Å—Ç–æ–≤: " + e.getMessage()));
            return 0;
        }
    }
    
    /**
     * –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç –∫–≤–µ—Å—Ç—ã –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞
     */
    private static int reloadClassQuests(CommandContext<ServerCommandSource> context, String playerClass) {
        ServerCommandSource source = context.getSource();
        
        try {
            ServerWorld world = source.getWorld();
            QuestApiManager manager = QuestApiManager.getInstance();
            
            source.sendFeedback(() -> Text.literal("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∫–≤–µ—Å—Ç—ã –¥–ª—è –∫–ª–∞—Å—Å–∞: " + playerClass)
                .formatted(Formatting.YELLOW), true);
            
            manager.forceUpdateClass(playerClass, world);
            
            source.sendFeedback(() -> Text.literal("‚úÖ –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á–∞—Ç –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.")
                .formatted(Formatting.GREEN), true);
            
            return 1;
        } catch (Exception e) {
            source.sendError(Text.literal("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ –∫–≤–µ—Å—Ç–æ–≤ –¥–ª—è –∫–ª–∞—Å—Å–∞ " + playerClass + ": " + e.getMessage()));
            return 0;
        }
    }
    
    /**
     * –û—á–∏—â–∞–µ—Ç –∫—ç—à –∫–≤–µ—Å—Ç–æ–≤
     */
    private static int clearCache(CommandContext<ServerCommandSource> context) {
        ServerCommandSource source = context.getSource();
        
        try {
            // –ó–¥–µ—Å—å –º—ã –±—ã –æ—á–∏—Å—Ç–∏–ª–∏ –∫—ç—à, –Ω–æ —É –Ω–∞—Å –Ω–µ—Ç –ø—É–±–ª–∏—á–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞ –¥–ª—è —ç—Ç–æ–≥–æ
            // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –º–µ—Ç–æ–¥ clearCache() –≤ QuestApiManager –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            
            source.sendFeedback(() -> Text.literal("üóëÔ∏è –ö—ç—à –∫–≤–µ—Å—Ç–æ–≤ –æ—á–∏—â–µ–Ω!")
                .formatted(Formatting.GREEN), true);
            
            source.sendFeedback(() -> Text.literal("üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /quest_api reload –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤—ã—Ö –∫–≤–µ—Å—Ç–æ–≤")
                .formatted(Formatting.GRAY), false);
            
            return 1;
        } catch (Exception e) {
            source.sendError(Text.literal("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫—ç—à–∞: " + e.getMessage()));
            return 0;
        }
    }
    
    /**
     * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–∞—Ä—Å–∏–Ω–≥ JSON –±–µ–∑ –ø–æ–ª—è description
     */
    private static int testJsonParsing(CommandContext<ServerCommandSource> context) {
        ServerCommandSource source = context.getSource();
        
        try {
            source.sendFeedback(() -> Text.literal("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥ JSON –±–µ–∑ –ø–æ–ª—è description...")
                .formatted(Formatting.YELLOW), true);
            
            // –¢–µ—Å—Ç–æ–≤—ã–π JSON –±–µ–∑ –ø–æ–ª—è description
            String testJson = """
                {
                  "cook": [
                    {
                      "id": "cook_test_1",
                      "playerClass": "origins:cook",
                      "level": 1,
                      "title": "–¢–µ—Å—Ç–æ–≤—ã–π –∫–≤–µ—Å—Ç –ø–æ–≤–∞—Ä–∞",
                      "objective": {
                        "type": "collect",
                        "target": "minecraft:wheat",
                        "amount": 5
                      },
                      "timeLimit": 20,
                      "reward": {
                        "type": "skill_point_token",
                        "tier": 1,
                        "experience": 500
                      }
                    }
                  ],
                  "warrior": [
                    {
                      "id": "warrior_test_1",
                      "playerClass": "origins:warrior",
                      "level": 1,
                      "title": "–¢–µ—Å—Ç–æ–≤—ã–π –∫–≤–µ—Å—Ç –≤–æ–∏–Ω–∞",
                      "objective": {
                        "type": "kill",
                        "target": "zombie",
                        "amount": 3
                      },
                      "timeLimit": 25,
                      "reward": {
                        "type": "skill_point_token",
                        "tier": 1,
                        "experience": 500
                      }
                    }
                  ],
                  "courier": [],
                  "brewer": [],
                  "blacksmith": [],
                  "miner": []
                }
                """;
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ—Ñ–ª–µ–∫—Å–∏—é –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º—É –º–µ—Ç–æ–¥—É –ø–∞—Ä—Å–∏–Ω–≥–∞
            try {
                Class<?> clientClass = Class.forName("io.github.apace100.origins.quest.QuestApiClient");
                java.lang.reflect.Method parseMethod = clientClass.getDeclaredMethod("parseAllQuestsFromJson", String.class);
                parseMethod.setAccessible(true);
                
                @SuppressWarnings("unchecked")
                java.util.Map<String, java.util.List<io.github.apace100.origins.quest.Quest>> result = 
                    (java.util.Map<String, java.util.List<io.github.apace100.origins.quest.Quest>>) parseMethod.invoke(null, testJson);
                
                int totalQuests = result.values().stream().mapToInt(java.util.List::size).sum();
                
                source.sendFeedback(() -> Text.literal("‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ —É—Å–ø–µ—à–µ–Ω! –ü–æ–ª—É—á–µ–Ω–æ " + totalQuests + " –∫–≤–µ—Å—Ç–æ–≤")
                    .formatted(Formatting.GREEN), true);
                
                for (java.util.Map.Entry<String, java.util.List<io.github.apace100.origins.quest.Quest>> entry : result.entrySet()) {
                    String className = entry.getKey();
                    int questCount = entry.getValue().size();
                    
                    source.sendFeedback(() -> Text.literal("  üìã " + className + ": " + questCount + " –∫–≤–µ—Å—Ç–æ–≤")
                        .formatted(Formatting.AQUA), false);
                    
                    for (io.github.apace100.origins.quest.Quest quest : entry.getValue()) {
                        source.sendFeedback(() -> Text.literal("    - " + quest.getTitle() + " (ID: " + quest.getId() + ")")
                            .formatted(Formatting.GRAY), false);
                    }
                }
                
                return 1;
                
            } catch (Exception e) {
                source.sendError(Text.literal("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞: " + e.getMessage()));
                e.printStackTrace();
                return 0;
            }
            
        } catch (Exception e) {
            source.sendError(Text.literal("‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: " + e.getMessage()));
            return 0;
        }
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Å—ã—Ä–æ–π JSON –æ—Ç–≤–µ—Ç –æ—Ç API –∏ –≤—ã–≤–æ–¥–∏—Ç –µ–≥–æ –≤ —á–∞—Ç
     */
    private static int getRawJson(CommandContext<ServerCommandSource> context) {
        ServerCommandSource source = context.getSource();
        
        try {
            source.sendFeedback(() -> Text.literal("üîç –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—ã—Ä–æ–π JSON –æ—Ç API...")
                .formatted(Formatting.YELLOW), true);
            
            // –î–µ–ª–∞–µ–º –ø—Ä—è–º–æ–π HTTP –∑–∞–ø—Ä–æ—Å –∫ API
            java.net.http.HttpClient httpClient = java.net.http.HttpClient.newBuilder()
                .connectTimeout(java.time.Duration.ofSeconds(30))
                .build();
            
            java.net.http.HttpRequest request = java.net.http.HttpRequest.newBuilder()
                .uri(java.net.URI.create("http://localhost:8000/quests/all"))
                .timeout(java.time.Duration.ofSeconds(600)) // 10 –º–∏–Ω—É—Ç —Ç–∞–π–º–∞—É—Ç
                .GET()
                .build();
            
            source.sendFeedback(() -> Text.literal("‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API (–º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 10 –º–∏–Ω—É—Ç)...")
                .formatted(Formatting.GRAY), false);
            
            // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
            httpClient.sendAsync(request, java.net.http.HttpResponse.BodyHandlers.ofString())
                .thenAccept(response -> {
                    if (response.statusCode() == 200) {
                        String jsonResponse = response.body();
                        
                        source.sendFeedback(() -> Text.literal("‚úÖ –ü–æ–ª—É—á–µ–Ω JSON –æ—Ç–≤–µ—Ç (" + jsonResponse.length() + " —Å–∏–º–≤–æ–ª–æ–≤)")
                            .formatted(Formatting.GREEN), false);
                        
                        // –†–∞–∑–±–∏–≤–∞–µ–º JSON –Ω–∞ —á–∞—Å—Ç–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —á–∞—Ç–µ (Minecraft –∏–º–µ–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏–π)
                        int maxLength = 500; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                        int parts = (jsonResponse.length() + maxLength - 1) / maxLength;
                        
                        source.sendFeedback(() -> Text.literal("üìÑ JSON –æ—Ç–≤–µ—Ç (—Ä–∞–∑–±–∏—Ç –Ω–∞ " + parts + " —á–∞—Å—Ç–µ–π):")
                            .formatted(Formatting.AQUA), false);
                        
                        for (int i = 0; i < parts; i++) {
                            int start = i * maxLength;
                            int end = Math.min(start + maxLength, jsonResponse.length());
                            String part = jsonResponse.substring(start, end);
                            
                            final int partNum = i + 1;
                            source.sendFeedback(() -> Text.literal("üìÑ –ß–∞—Å—Ç—å " + partNum + "/" + parts + ": " + part)
                                .formatted(Formatting.WHITE), false);
                        }
                        
                        source.sendFeedback(() -> Text.literal("‚úÖ –ü–æ–ª–Ω—ã–π JSON –æ—Ç–≤–µ—Ç –≤—ã–≤–µ–¥–µ–Ω –≤—ã—à–µ")
                            .formatted(Formatting.GREEN), false);
                        
                    } else {
                        source.sendFeedback(() -> Text.literal("‚ùå API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: " + response.statusCode())
                            .formatted(Formatting.RED), false);
                        source.sendFeedback(() -> Text.literal("–û—Ç–≤–µ—Ç: " + response.body())
                            .formatted(Formatting.GRAY), false);
                    }
                })
                .exceptionally(throwable -> {
                    source.sendFeedback(() -> Text.literal("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: " + throwable.getMessage())
                        .formatted(Formatting.RED), false);
                    return null;
                });
            
            source.sendFeedback(() -> Text.literal("üì° –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ, –æ–∂–∏–¥–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç...")
                .formatted(Formatting.GRAY), false);
            
            return 1;
            
        } catch (Exception e) {
            source.sendError(Text.literal("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—ã—Ä–æ–≥–æ JSON: " + e.getMessage()));
            return 0;
        }
    }
    
    /**
     * –û—Ç–ª–∞–¥–∫–∞ –∫—ç—à–∞ –∫–≤–µ—Å—Ç–æ–≤ - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —á—Ç–æ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∫—ç—à–µ
     */
    private static int debugCache(CommandContext<ServerCommandSource> context) {
        ServerCommandSource source = context.getSource();
        
        try {
            QuestApiManager manager = QuestApiManager.getInstance();
            
            source.sendFeedback(() -> Text.literal("üîç –û—Ç–ª–∞–¥–∫–∞ –∫—ç—à–∞ –∫–≤–µ—Å—Ç–æ–≤:")
                .formatted(Formatting.YELLOW), true);
            
            boolean hasAnyQuests = false;
            
            for (String playerClass : manager.getAvailableClasses()) {
                java.util.List<io.github.apace100.origins.quest.Quest> quests = manager.getQuestsForClass(playerClass);
                
                source.sendFeedback(() -> Text.literal("üìã " + playerClass + ": " + quests.size() + " –∫–≤–µ—Å—Ç–æ–≤")
                    .formatted(Formatting.AQUA), false);
                
                if (!quests.isEmpty()) {
                    hasAnyQuests = true;
                    for (int i = 0; i < Math.min(3, quests.size()); i++) {
                        final int questNum = i + 1;
                        final io.github.apace100.origins.quest.Quest quest = quests.get(i);
                        source.sendFeedback(() -> Text.literal("  " + questNum + ". " + quest.getTitle() + " (ID: " + quest.getId() + ")")
                            .formatted(Formatting.GRAY), false);
                    }
                    if (quests.size() > 3) {
                        final int remaining = quests.size() - 3;
                        source.sendFeedback(() -> Text.literal("  ... –∏ –µ—â–µ " + remaining + " –∫–≤–µ—Å—Ç–æ–≤")
                            .formatted(Formatting.DARK_GRAY), false);
                    }
                }
            }
            
            if (!hasAnyQuests) {
                source.sendFeedback(() -> Text.literal("‚ùå –ö—ç—à –ø—É—Å—Ç! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å /quest_api reload")
                    .formatted(Formatting.RED), false);
            } else {
                source.sendFeedback(() -> Text.literal("‚úÖ –ö—ç—à —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–≤–µ—Å—Ç—ã. –ï—Å–ª–∏ –æ–Ω–∏ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –≤ –¥–æ—Å–∫–∞—Ö, –ø—Ä–æ–±–ª–µ–º–∞ –≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–æ—Å–æ–∫.")
                    .formatted(Formatting.GREEN), false);
            }
            
            return 1;
            
        } catch (Exception e) {
            source.sendError(Text.literal("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ª–∞–¥–∫–µ –∫—ç—à–∞: " + e.getMessage()));
            return 0;
        }
    }
}