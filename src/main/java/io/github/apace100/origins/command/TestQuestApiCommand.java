package io.github.apace100.origins.command;

import com.mojang.brigadier.CommandDispatcher;
import com.mojang.brigadier.arguments.IntegerArgumentType;
import com.mojang.brigadier.arguments.StringArgumentType;
import com.mojang.brigadier.context.CommandContext;
import io.github.apace100.origins.quest.QuestApiChatLogger;
import io.github.apace100.origins.quest.QuestApiManager;
import net.minecraft.command.CommandRegistryAccess;
import net.minecraft.server.command.CommandManager;
import net.minecraft.server.command.ServerCommandSource;
import net.minecraft.server.world.ServerWorld;
import net.minecraft.text.Text;
import net.minecraft.util.Formatting;

/**
 * –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Quest API
 */
public class TestQuestApiCommand {
    
    public static void register(CommandDispatcher<ServerCommandSource> dispatcher, CommandRegistryAccess registryAccess) {
        dispatcher.register(CommandManager.literal("quest_api")
            .requires(source -> source.hasPermissionLevel(2))
            .then(CommandManager.literal("test")
                .then(CommandManager.argument("class", StringArgumentType.string())
                    .executes(context -> testApiForClass(context, StringArgumentType.getString(context, "class"), 10))
                    .then(CommandManager.argument("count", IntegerArgumentType.integer(1, 10))
                        .executes(context -> testApiForClass(context, 
                            StringArgumentType.getString(context, "class"),
                            IntegerArgumentType.getInteger(context, "count"))))))
            .then(CommandManager.literal("status")
                .executes(TestQuestApiCommand::checkApiStatus))
            .then(CommandManager.literal("reload")
                .executes(TestQuestApiCommand::reloadAllQuests))
            .then(CommandManager.literal("reload_class")
                .then(CommandManager.argument("class", StringArgumentType.string())
                    .executes(context -> reloadClassQuests(context, StringArgumentType.getString(context, "class")))))
            .then(CommandManager.literal("clear_cache")
                .executes(TestQuestApiCommand::clearCache))
        );
    }
    
    /**
     * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç API –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞
     */
    private static int testApiForClass(CommandContext<ServerCommandSource> context, String playerClass, int questCount) {
        ServerCommandSource source = context.getSource();
        
        try {
            ServerWorld world = source.getWorld();
            QuestApiManager manager = QuestApiManager.getInstance();
            
            source.sendFeedback(() -> Text.literal("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º API –¥–ª—è –∫–ª–∞—Å—Å–∞: " + playerClass + " (–∫–≤–µ—Å—Ç–æ–≤: " + questCount + ")")
                .formatted(Formatting.YELLOW), true);
            
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–≤–µ—Å—Ç—ã –¥–ª—è –∫–ª–∞—Å—Å–∞
            manager.forceUpdateClass(playerClass, world);
            
            source.sendFeedback(() -> Text.literal("‚úÖ –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á–∞—Ç –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.")
                .formatted(Formatting.GREEN), true);
            
            return 1;
        } catch (Exception e) {
            source.sendError(Text.literal("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ API: " + e.getMessage()));
            return 0;
        }
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å API
     */
    private static int checkApiStatus(CommandContext<ServerCommandSource> context) {
        ServerCommandSource source = context.getSource();
        QuestApiManager manager = QuestApiManager.getInstance();
        
        boolean isAvailable = manager.isApiAvailable();
        
        if (isAvailable) {
            source.sendFeedback(() -> Text.literal("üü¢ Quest API: –ü–û–î–ö–õ–Æ–ß–ï–ù")
                .formatted(Formatting.GREEN), false);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–≤–µ—Å—Ç–∞—Ö
            for (String playerClass : manager.getAvailableClasses()) {
                int questCount = manager.getQuestsForClass(playerClass).size();
                int minutesUntilUpdate = manager.getMinutesUntilNextUpdate(playerClass);
                
                source.sendFeedback(() -> Text.literal("  üìã " + playerClass + ": " + questCount + " –∫–≤–µ—Å—Ç–æ–≤")
                    .formatted(Formatting.AQUA)
                    .append(Text.literal(" (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ " + minutesUntilUpdate + " –º–∏–Ω)")
                        .formatted(Formatting.GRAY)), false);
            }
        } else {
            source.sendFeedback(() -> Text.literal("üî¥ Quest API: –ù–ï–î–û–°–¢–£–ü–ï–ù")
                .formatted(Formatting.RED), false);
            source.sendFeedback(() -> Text.literal("  –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ FastAPI —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ localhost:8000")
                .formatted(Formatting.GRAY), false);
        }
        
        return 1;
    }
    
    /**
     * –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç –∫–≤–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∫–ª–∞—Å—Å–æ–≤
     */
    private static int reloadAllQuests(CommandContext<ServerCommandSource> context) {
        ServerCommandSource source = context.getSource();
        
        try {
            ServerWorld world = source.getWorld();
            QuestApiManager manager = QuestApiManager.getInstance();
            
            source.sendFeedback(() -> Text.literal("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∫–≤–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∫–ª–∞—Å—Å–æ–≤...")
                .formatted(Formatting.YELLOW), true);
            
            QuestApiChatLogger.logQuestUpdate(world.getServer());
            
            for (String playerClass : manager.getAvailableClasses()) {
                manager.forceUpdateClass(playerClass, world);
            }
            
            source.sendFeedback(() -> Text.literal("‚úÖ –ó–∞–ø—Ä–æ—Å—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á–∞—Ç –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.")
                .formatted(Formatting.GREEN), true);
            
            return 1;
        } catch (Exception e) {
            source.sendError(Text.literal("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ –∫–≤–µ—Å—Ç–æ–≤: " + e.getMessage()));
            return 0;
        }
    }
    
    /**
     * –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç –∫–≤–µ—Å—Ç—ã –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞
     */
    private static int reloadClassQuests(CommandContext<ServerCommandSource> context, String playerClass) {
        ServerCommandSource source = context.getSource();
        
        try {
            ServerWorld world = source.getWorld();
            QuestApiManager manager = QuestApiManager.getInstance();
            
            source.sendFeedback(() -> Text.literal("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∫–≤–µ—Å—Ç—ã –¥–ª—è –∫–ª–∞—Å—Å–∞: " + playerClass)
                .formatted(Formatting.YELLOW), true);
            
            manager.forceUpdateClass(playerClass, world);
            
            source.sendFeedback(() -> Text.literal("‚úÖ –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á–∞—Ç –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.")
                .formatted(Formatting.GREEN), true);
            
            return 1;
        } catch (Exception e) {
            source.sendError(Text.literal("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ –∫–≤–µ—Å—Ç–æ–≤ –¥–ª—è –∫–ª–∞—Å—Å–∞ " + playerClass + ": " + e.getMessage()));
            return 0;
        }
    }
    
    /**
     * –û—á–∏—â–∞–µ—Ç –∫—ç—à –∫–≤–µ—Å—Ç–æ–≤
     */
    private static int clearCache(CommandContext<ServerCommandSource> context) {
        ServerCommandSource source = context.getSource();
        
        try {
            // –ó–¥–µ—Å—å –º—ã –±—ã –æ—á–∏—Å—Ç–∏–ª–∏ –∫—ç—à, –Ω–æ —É –Ω–∞—Å –Ω–µ—Ç –ø—É–±–ª–∏—á–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞ –¥–ª—è —ç—Ç–æ–≥–æ
            // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –º–µ—Ç–æ–¥ clearCache() –≤ QuestApiManager –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            
            source.sendFeedback(() -> Text.literal("üóëÔ∏è –ö—ç—à –∫–≤–µ—Å—Ç–æ–≤ –æ—á–∏—â–µ–Ω!")
                .formatted(Formatting.GREEN), true);
            
            source.sendFeedback(() -> Text.literal("üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /quest_api reload –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤—ã—Ö –∫–≤–µ—Å—Ç–æ–≤")
                .formatted(Formatting.GRAY), false);
            
            return 1;
        } catch (Exception e) {
            source.sendError(Text.literal("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫—ç—à–∞: " + e.getMessage()));
            return 0;
        }
    }
}