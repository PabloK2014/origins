package io.github.apace100.origins.command;

import com.mojang.brigadier.CommandDispatcher;
import com.mojang.brigadier.arguments.IntegerArgumentType;
import com.mojang.brigadier.arguments.StringArgumentType;
import com.mojang.brigadier.context.CommandContext;
import com.mojang.brigadier.exceptions.CommandSyntaxException;
import io.github.apace100.origins.profession.Profession;
import io.github.apace100.origins.profession.ProfessionComponent;
import io.github.apace100.origins.profession.ProfessionProgress;
import io.github.apace100.origins.profession.ProfessionRegistry;
import net.minecraft.command.argument.EntityArgumentType;
import net.minecraft.server.command.CommandManager;
import net.minecraft.server.command.ServerCommandSource;
import net.minecraft.server.network.ServerPlayerEntity;
import net.minecraft.text.Text;
import net.minecraft.util.Formatting;

import static net.minecraft.server.command.CommandManager.argument;
import static net.minecraft.server.command.CommandManager.literal;

/**
 * –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–∏
 */
public class ProgressionCommand {
    
    public static void register(CommandDispatcher<ServerCommandSource> dispatcher) {
        dispatcher.register(literal("progression")
            .requires(source -> source.hasPermissionLevel(2))
            
            // /progression info [–∏–≥—Ä–æ–∫]
            .then(literal("info")
                .executes(context -> executeInfo(context, null))
                .then(argument("player", EntityArgumentType.player())
                    .executes(context -> executeInfo(context, EntityArgumentType.getPlayer(context, "player")))
                )
            )
            
            // /progression add <–∏–≥—Ä–æ–∫> <–æ–ø—ã—Ç>
            .then(literal("add")
                .then(argument("player", EntityArgumentType.player())
                    .then(argument("experience", IntegerArgumentType.integer(1))
                        .executes(ProgressionCommand::executeAddExperience)
                    )
                )
            )
            
            // /progression set <–∏–≥—Ä–æ–∫> <—É—Ä–æ–≤–µ–Ω—å>
            .then(literal("set")
                .then(argument("player", EntityArgumentType.player())
                    .then(argument("level", IntegerArgumentType.integer(1))
                        .executes(ProgressionCommand::executeSetLevel)
                    )
                )
            )
            
            // /progression reset <–∏–≥—Ä–æ–∫>
            .then(literal("reset")
                .then(argument("player", EntityArgumentType.player())
                    .executes(ProgressionCommand::executeReset)
                )
            )
        );
    }
    
    public static int executeInfo(CommandContext<ServerCommandSource> context, ServerPlayerEntity targetPlayer) throws CommandSyntaxException {
        ServerPlayerEntity player = targetPlayer != null ? targetPlayer : context.getSource().getPlayerOrThrow();
        
        ProfessionComponent component = ProfessionComponent.KEY.get(player);
        ProfessionProgress progress = component.getCurrentProgress();
        
        if (progress == null) {
            context.getSource().sendFeedback(() -> Text.literal("–£ –∏–≥—Ä–æ–∫–∞ " + player.getName().getString() + " –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏—è")
                .formatted(Formatting.YELLOW), false);
            return 0;
        }
        
        Profession profession = ProfessionRegistry.get(progress.getProfessionId());
        String professionName = profession != null ? profession.getName() : progress.getProfessionId().toString();
        
        context.getSource().sendFeedback(() -> Text.literal("=== –ü—Ä–æ–≥—Ä–µ—Å—Å–∏—è –∏–≥—Ä–æ–∫–∞ " + player.getName().getString() + " ===")
            .formatted(Formatting.GOLD), false);
        
        context.getSource().sendFeedback(() -> Text.literal("–ü—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏–µ: " + professionName)
            .formatted(Formatting.AQUA), false);
        
        context.getSource().sendFeedback(() -> Text.literal("–£—Ä–æ–≤–µ–Ω—å: " + progress.getLevel())
            .formatted(Formatting.GREEN), false);
        
        context.getSource().sendFeedback(() -> Text.literal("–û–ø—ã—Ç: " + progress.getExperience() + "/" + progress.getExperienceForNextLevel() + " (" + (int)(progress.getLevelProgress() * 100) + "%)")
            .formatted(Formatting.BLUE), false);
        
        context.getSource().sendFeedback(() -> Text.literal("–û–±—â–∏–π –æ–ø—ã—Ç: " + progress.getTotalExperience())
            .formatted(Formatting.GRAY), false);
        
        return 1;
    }
    
    public static int executeAddExperience(CommandContext<ServerCommandSource> context) throws CommandSyntaxException {
        ServerPlayerEntity player = EntityArgumentType.getPlayer(context, "player");
        int experience = IntegerArgumentType.getInteger(context, "experience");
        
        ProfessionComponent component = ProfessionComponent.KEY.get(player);
        ProfessionProgress progress = component.getCurrentProgress();
        
        if (progress == null) {
            context.getSource().sendError(Text.literal("–£ –∏–≥—Ä–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏—è"));
            return 0;
        }
        
        int oldLevel = progress.getLevel();
        component.addExperience(experience);
        int newLevel = progress.getLevel();
        

        
        context.getSource().sendFeedback(() -> Text.literal("–î–æ–±–∞–≤–ª–µ–Ω–æ " + experience + " –æ–ø—ã—Ç–∞ –∏–≥—Ä–æ–∫—É " + player.getName().getString())
            .formatted(Formatting.GREEN), true);
        
        if (newLevel > oldLevel) {
            context.getSource().sendFeedback(() -> Text.literal("–ò–≥—Ä–æ–∫ –ø–æ–≤—ã—Å–∏–ª —É—Ä–æ–≤–µ–Ω—å —Å " + oldLevel + " –¥–æ " + newLevel + "!")
                .formatted(Formatting.GOLD), true);
        }
        
        return 1;
    }
    
    public static int executeSetLevel(CommandContext<ServerCommandSource> context) throws CommandSyntaxException {
        ServerPlayerEntity player = EntityArgumentType.getPlayer(context, "player");
        int level = IntegerArgumentType.getInteger(context, "level");
        
        ProfessionComponent component = ProfessionComponent.KEY.get(player);
        ProfessionProgress progress = component.getCurrentProgress();
        
        if (progress == null) {
            context.getSource().sendError(Text.literal("–£ –∏–≥—Ä–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏—è"));
            return 0;
        }
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å —á–µ—Ä–µ–∑ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
        component.setLevel(level);
        

        
        context.getSource().sendFeedback(() -> Text.literal("–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Ä–æ–≤–µ–Ω—å " + level + " –¥–ª—è –∏–≥—Ä–æ–∫–∞ " + player.getName().getString())
            .formatted(Formatting.GREEN), true);
        
        return 1;
    }
    
    public static int executeReset(CommandContext<ServerCommandSource> context) throws CommandSyntaxException {
        ServerPlayerEntity player = EntityArgumentType.getPlayer(context, "player");
        
        ProfessionComponent component = ProfessionComponent.KEY.get(player);
        ProfessionProgress progress = component.getCurrentProgress();
        
        if (progress == null) {
            context.getSource().sendError(Text.literal("–£ –∏–≥—Ä–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏—è"));
            return 0;
        }
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –¥–æ 1
        component.setLevel(1);
        return 1;
    }
    
    private static String getOriginDisplayName(String originId) {
        return switch (originId) {
            case "origins:blacksmith" -> "üî® –ö—É–∑–Ω–µ—Ü";
            case "origins:brewer" -> "üç∫ –ü–∏–≤–æ–≤–∞—Ä";
            case "origins:cook" -> "üë®‚Äçüç≥ –ü–æ–≤–∞—Ä";
            case "origins:courier" -> "üì¶ –ö—É—Ä—å–µ—Ä";
            case "origins:warrior" -> "‚öîÔ∏è –í–æ–∏–Ω";
            case "origins:miner" -> "‚õèÔ∏è –®–∞—Ö—Ç–µ—Ä";
            case "origins:human" -> "üë§ –ß–µ–ª–æ–≤–µ–∫";
            default -> originId.replace("origins:", "").replace("_", " ");
        };
    }
}