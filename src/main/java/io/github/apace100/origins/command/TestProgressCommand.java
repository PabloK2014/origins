package io.github.apace100.origins.command;

import com.mojang.brigadier.CommandDispatcher;
import com.mojang.brigadier.arguments.IntegerArgumentType;
import com.mojang.brigadier.arguments.StringArgumentType;
import com.mojang.brigadier.context.CommandContext;
import io.github.apace100.origins.Origins;
import io.github.apace100.origins.quest.QuestProgressTracker;
import io.github.apace100.origins.quest.QuestTicketItem;
import net.minecraft.command.CommandRegistryAccess;
import net.minecraft.item.ItemStack;
import net.minecraft.server.command.CommandManager;
import net.minecraft.server.command.ServerCommandSource;
import net.minecraft.server.network.ServerPlayerEntity;
import net.minecraft.text.Text;
import net.minecraft.util.Formatting;

/**
 * –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∫–≤–µ—Å—Ç–æ–≤
 */
public class TestProgressCommand {
    
    public static void register(CommandDispatcher<ServerCommandSource> dispatcher, CommandRegistryAccess registryAccess) {
        dispatcher.register(CommandManager.literal("testprogress")
            .requires(source -> source.hasPermissionLevel(2))
            .then(CommandManager.argument("action", StringArgumentType.string())
                .then(CommandManager.argument("target", StringArgumentType.string())
                    .then(CommandManager.argument("amount", IntegerArgumentType.integer(1))
                        .executes(TestProgressCommand::execute)))));
    }
    
    private static int execute(CommandContext<ServerCommandSource> context) {
        try {
            ServerCommandSource source = context.getSource();
            ServerPlayerEntity player = source.getPlayerOrThrow();
            
            String action = StringArgumentType.getString(context, "action");
            String target = StringArgumentType.getString(context, "target");
            int amount = IntegerArgumentType.getInteger(context, "amount");
            
            Origins.LOGGER.info("–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å: action={}, target={}, amount={}", action, target, amount);
            
            // –ò—â–µ–º –±–∏–ª–µ—Ç—ã –∫–≤–µ—Å—Ç–æ–≤ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ –∏–≥—Ä–æ–∫–∞
            boolean foundTicket = false;
            for (int i = 0; i < player.getInventory().size(); i++) {
                ItemStack stack = player.getInventory().getStack(i);
                if (QuestTicketItem.isQuestTicket(stack) && QuestTicketItem.isAccepted(stack)) {
                    Origins.LOGGER.info("–ù–∞–π–¥–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π –±–∏–ª–µ—Ç –∫–≤–µ—Å—Ç–∞: {}", stack);
                    
                    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                    boolean updated = QuestTicketItem.updateQuestProgress(stack, action, target, amount);
                    
                    if (updated) {
                        source.sendFeedback(() -> Text.literal("‚úÖ –ü—Ä–æ–≥—Ä–µ—Å—Å –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –±–∏–ª–µ—Ç–∞ –∫–≤–µ—Å—Ç–∞!")
                            .formatted(Formatting.GREEN), false);
                        foundTicket = true;
                    } else {
                        source.sendFeedback(() -> Text.literal("‚ùå –ü—Ä–æ–≥—Ä–µ—Å—Å –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω - —Ü–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç")
                            .formatted(Formatting.RED), false);
                    }
                }
            }
            
            if (!foundTicket) {
                source.sendFeedback(() -> Text.literal("‚ùå –ê–∫—Ç–∏–≤–Ω—ã–µ –±–∏–ª–µ—Ç—ã –∫–≤–µ—Å—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ")
                    .formatted(Formatting.RED), false);
            }
            
            // –¢–∞–∫–∂–µ —Ç–µ—Å—Ç–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ QuestProgressTracker
            QuestProgressTracker tracker = QuestProgressTracker.getInstance();
            tracker.trackPlayerAction(player, action, target, amount);
            
            source.sendFeedback(() -> Text.literal("üîÑ –¢–∞–∫–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ QuestProgressTracker")
                .formatted(Formatting.YELLOW), false);
            
            return 1;
            
        } catch (Exception e) {
            Origins.LOGGER.error("–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ testprogress: {}", e.getMessage());
            context.getSource().sendError(Text.literal("–û—à–∏–±–∫–∞: " + e.getMessage()));
            return 0;
        }
    }
}