package io.github.apace100.origins.command;

import com.mojang.brigadier.CommandDispatcher;
import com.mojang.brigadier.arguments.StringArgumentType;
import com.mojang.brigadier.context.CommandContext;
import io.github.apace100.origins.Origins;
import io.github.apace100.origins.quest.ChatAssistantApiClient;
import io.github.apace100.origins.quest.ChatMessageAnimator;
import net.minecraft.command.CommandRegistryAccess;
import net.minecraft.server.command.CommandManager;
import net.minecraft.server.command.ServerCommandSource;
import net.minecraft.text.Text;
import net.minecraft.util.Formatting;

import java.util.List;

/**
 * –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —á–∞—Ç-–ø–æ–º–æ—â–Ω–∏–∫–∞ Minecraft
 */
public class MinecraftChatAssistant {
    
    private static final String MINECRAFT_VERSION = "1.20.1";
    private static final int MAX_MESSAGE_LENGTH = 500; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –æ–¥–Ω–æ–π —á–∞—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    
    /**
     * –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –∫–æ–º–∞–Ω–¥—É /ask
     */
    public static void register(CommandDispatcher<ServerCommandSource> dispatcher, CommandRegistryAccess registryAccess) {
        dispatcher.register(CommandManager.literal("ask")
            .then(CommandManager.argument("question", StringArgumentType.greedyString())
                .executes(context -> handleAskCommand(context, 
                    StringArgumentType.getString(context, "question")))));
    }
    
    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /ask
     */
    private static int handleAskCommand(CommandContext<ServerCommandSource> context, String question) {
        ServerCommandSource source = context.getSource();
        
        try {
            // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            if (question == null || question.trim().isEmpty()) {
                ChatMessageAnimator.sendErrorMessage(source, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å. –ü—Ä–∏–º–µ—Ä: /ask –∫–∞–∫ —Å–¥–µ–ª–∞—Ç—å –ø–∞–ª–∫–∏");
                return 0;
            }
            
            if (question.length() > 2000) {
                ChatMessageAnimator.sendErrorMessage(source, "–í–æ–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ú–∞–∫—Å–∏–º—É–º 2000 —Å–∏–º–≤–æ–ª–æ–≤.");
                return 0;
            }
            
            Origins.LOGGER.info("ü§ñ [ChatAssistant] –ò–≥—Ä–æ–∫ –∑–∞–¥–∞–ª –≤–æ–ø—Ä–æ—Å: " + question);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
            ChatMessageAnimator.sendLoadingMessage(source, "–û—Ç–ø—Ä–∞–≤–ª—è—é –≤–∞—à –≤–æ–ø—Ä–æ—Å AI –ø–æ–º–æ—â–Ω–∏–∫—É...");
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
            ChatAssistantApiClient.isChatApiAvailable()
                .thenAccept(available -> {
                    if (!available) {
                        ChatMessageAnimator.sendErrorMessage(source, "AI –ø–æ–º–æ—â–Ω–∏–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
                        return;
                    }
                    
                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –∫ AI
                    ChatAssistantApiClient.askQuestion(question, MINECRAFT_VERSION)
                        .thenAccept(response -> {
                            try {
                                if (response.success) {
                                    // –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç - –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
                                    handleSuccessfulResponse(source, response);
                                } else {
                                    // –û—à–∏–±–∫–∞ –æ—Ç API
                                    ChatMessageAnimator.sendErrorMessage(source, 
                                        response.errorMessage != null ? response.errorMessage : "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–æ–ø—Ä–æ—Å–∞");
                                }
                            } catch (Exception e) {
                                Origins.LOGGER.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç AI", e);
                                ChatMessageAnimator.sendErrorMessage(source, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞");
                            }
                        })
                        .exceptionally(throwable -> {
                            Origins.LOGGER.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ AI API", throwable);
                            ChatMessageAnimator.sendErrorMessage(source, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å AI –ø–æ–º–æ—â–Ω–∏–∫–æ–º");
                            return null;
                        });
                })
                .exceptionally(throwable -> {
                    Origins.LOGGER.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API", throwable);
                    ChatMessageAnimator.sendErrorMessage(source, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å AI –ø–æ–º–æ—â–Ω–∏–∫–∞");
                    return null;
                });
            
            return 1;
            
        } catch (Exception e) {
            Origins.LOGGER.error("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /ask", e);
            ChatMessageAnimator.sendErrorMessage(source, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞");
            return 0;
        }
    }
    
    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç AI
     */
    private static void handleSuccessfulResponse(ServerCommandSource source, ChatAssistantApiClient.ChatResponse response) {
        try {
            String answer = response.answer;
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ –æ—Ç–≤–µ—Ç–∞
            Formatting color = switch (response.responseType) {
                case "recipe" -> Formatting.GOLD;
                case "mechanic" -> Formatting.BLUE;
                case "error" -> Formatting.RED;
                default -> Formatting.AQUA;
            };
            
            // –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –¥–ª–∏–Ω–Ω—ã–π, —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
            if (answer.length() > MAX_MESSAGE_LENGTH) {
                List<String> parts = ChatMessageAnimator.splitLongMessage(answer, MAX_MESSAGE_LENGTH);
                
                if (parts.size() > 1) {
                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–Ω–æ–≥–æ—á–∞—Å—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    ChatMessageAnimator.sendMultipartMessage(source, parts, 20); // 20 —Ç–∏–∫–æ–≤ = 1 —Å–µ–∫—É–Ω–¥–∞ –∑–∞–¥–µ—Ä–∂–∫–∏
                    Origins.LOGGER.info("ü§ñ [ChatAssistant] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–Ω–æ–≥–æ—á–∞—Å—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç (" + parts.size() + " —á–∞—Å—Ç–µ–π)");
                } else {
                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    ChatMessageAnimator.sendAnimatedMessage(source, answer, color);
                    Origins.LOGGER.info("ü§ñ [ChatAssistant] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª–∏–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç");
                }
            } else {
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                ChatMessageAnimator.sendAnimatedMessage(source, answer, color);
                Origins.LOGGER.info("ü§ñ [ChatAssistant] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ–±—ã—á–Ω—ã–π –æ—Ç–≤–µ—Ç");
            }
            
        } catch (Exception e) {
            Origins.LOGGER.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞", e);
            ChatMessageAnimator.sendErrorMessage(source, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞");
        }
    }
    
    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–Ω–∏–º–∞—Ü–∏—é –ø–µ—á–∞—Ç–∞–Ω–∏—è
     */
    private static void sendTypingAnimation(ServerCommandSource source) {
        ChatMessageAnimator.sendTypingIndicator(source, "AI –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–∞—à –≤–æ–ø—Ä–æ—Å");
    }
    
    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
     */
    private static void sendFormattedResponse(ServerCommandSource source, String response) {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—Ç–≤–µ—Ç–∞ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
        Formatting color = Formatting.AQUA;
        if (response.toLowerCase().contains("—Ä–µ—Ü–µ–ø—Ç") || response.toLowerCase().contains("–∫—Ä–∞—Ñ—Ç")) {
            color = Formatting.GOLD;
        } else if (response.toLowerCase().contains("–º–µ—Ö–∞–Ω–∏–∫–∞") || response.toLowerCase().contains("—Ä–∞–±–æ—Ç–∞–µ—Ç")) {
            color = Formatting.BLUE;
        }
        
        ChatMessageAnimator.sendAnimatedMessage(source, response, color);
    }
}