package io.github.apace100.origins.command;

import com.mojang.brigadier.CommandDispatcher;
import com.mojang.brigadier.arguments.StringArgumentType;
import com.mojang.brigadier.context.CommandContext;
import io.github.apace100.origins.Origins;
import io.github.apace100.origins.quest.QuestApiClient;
import io.github.apace100.origins.quest.QuestApiManager;
import io.github.apace100.origins.quest.QuestAccumulation;
import net.minecraft.command.CommandRegistryAccess;
import net.minecraft.server.command.CommandManager;
import net.minecraft.server.command.ServerCommandSource;
import net.minecraft.server.world.ServerWorld;
import net.minecraft.text.Text;
import net.minecraft.util.Formatting;

/**
 * –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Quest API
 */
public class TestQuestApiExtraCommand {
    
    public static void register(CommandDispatcher<ServerCommandSource> dispatcher, CommandRegistryAccess registryAccess) {
        dispatcher.register(CommandManager.literal("test_quest_api_extra")
            .requires(source -> source.hasPermissionLevel(2))
            .executes(TestQuestApiExtraCommand::executeAll)
            .then(CommandManager.argument("class", StringArgumentType.string())
                .suggests((context, builder) -> {
                    builder.suggest("cook");
                    builder.suggest("courier");
                    builder.suggest("brewer");
                    builder.suggest("blacksmith");
                    builder.suggest("miner");
                    builder.suggest("warrior");
                    return builder.buildFuture();
                })
                .executes(TestQuestApiExtraCommand::executeClass)
            )
        );
    }
    
    /**
     * –í—ã–ø–æ–ª–Ω—è–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –≤—Å–µ—Ö –∫–ª–∞—Å—Å–æ–≤
     */
    private static int executeAll(CommandContext<ServerCommandSource> context) {
        ServerCommandSource source = context.getSource();
        ServerWorld world = source.getWorld();
        
        source.sendMessage(Text.literal("üß™ [TEST] –ó–∞–ø—É—Å–∫–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –≤—Å–µ—Ö –∫–ª–∞—Å—Å–æ–≤...")
            .formatted(Formatting.YELLOW));
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è
        showAccumulationStats(source);
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        QuestApiManager manager = QuestApiManager.getInstance();
        manager.forceUpdateClass("all", world);
        
        source.sendMessage(Text.literal("‚úÖ [TEST] –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
            .formatted(Formatting.GREEN));
        
        return 1;
    }
    
    /**
     * –í—ã–ø–æ–ª–Ω—è–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞
     */
    private static int executeClass(CommandContext<ServerCommandSource> context) {
        ServerCommandSource source = context.getSource();
        ServerWorld world = source.getWorld();
        String playerClass = StringArgumentType.getString(context, "class");
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∫–ª–∞—Å—Å–∞
        String[] validClasses = {"cook", "courier", "brewer", "blacksmith", "miner", "warrior"};
        boolean isValidClass = false;
        for (String validClass : validClasses) {
            if (validClass.equals(playerClass)) {
                isValidClass = true;
                break;
            }
        }
        
        if (!isValidClass) {
            source.sendError(Text.literal("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª–∞—Å—Å! –î–æ—Å—Ç—É–ø–Ω—ã–µ: cook, courier, brewer, blacksmith, miner, warrior"));
            return 0;
        }
        
        source.sendMessage(Text.literal("üß™ [TEST] –ó–∞–ø—É—Å–∫–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –∫–ª–∞—Å—Å–∞: " + playerClass)
            .formatted(Formatting.YELLOW));
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∫–ª–∞—Å—Å–∞
        showClassStats(source, playerClass);
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –∫–ª–∞—Å—Å–∞
        QuestApiManager manager = QuestApiManager.getInstance();
        manager.forceUpdateClass(playerClass, world);
        
        source.sendMessage(Text.literal("‚úÖ [TEST] –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è " + playerClass + " –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
            .formatted(Formatting.GREEN));
        
        return 1;
    }
    
    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –∫–≤–µ—Å—Ç–æ–≤ –¥–ª—è –≤—Å–µ—Ö –∫–ª–∞—Å—Å–æ–≤
     */
    private static void showAccumulationStats(ServerCommandSource source) {
        source.sendMessage(Text.literal("üìä [STATS] –¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –∫–≤–µ—Å—Ç–æ–≤:")
            .formatted(Formatting.AQUA));
        
        QuestAccumulation accumulation = QuestAccumulation.getInstance();
        String[] classes = {"cook", "courier", "brewer", "blacksmith", "miner", "warrior"};
        
        for (String playerClass : classes) {
            int questCount = accumulation.getAccumulatedQuests(playerClass).size();
            int requestCount = accumulation.getRequestCount(playerClass);
            int maxRequests = accumulation.getMaxRequests();
            
            String className = getClassDisplayName(playerClass);
            
            source.sendMessage(Text.literal("  ‚Ä¢ " + className + ": " + questCount + " –∫–≤–µ—Å—Ç–æ–≤ (–∑–∞–ø—Ä–æ—Å " + requestCount + "/" + maxRequests + ")")
                .formatted(questCount > 0 ? Formatting.GREEN : Formatting.GRAY));
        }
    }
    
    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞
     */
    private static void showClassStats(ServerCommandSource source, String playerClass) {
        QuestAccumulation accumulation = QuestAccumulation.getInstance();
        
        int questCount = accumulation.getAccumulatedQuests(playerClass).size();
        int requestCount = accumulation.getRequestCount(playerClass);
        int maxRequests = accumulation.getMaxRequests();
        boolean shouldClear = accumulation.shouldClearOnNextRequest(playerClass);
        
        String className = getClassDisplayName(playerClass);
        
        source.sendMessage(Text.literal("üìä [STATS] –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è " + className + ":")
            .formatted(Formatting.AQUA));
        
        source.sendMessage(Text.literal("  –ù–∞–∫–æ–ø–ª–µ–Ω–Ω—ã—Ö –∫–≤–µ—Å—Ç–æ–≤: " + questCount)
            .formatted(Formatting.WHITE));
        
        source.sendMessage(Text.literal("  –ó–∞–ø—Ä–æ—Å–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: " + requestCount + "/" + maxRequests)
            .formatted(Formatting.WHITE));
        
        if (shouldClear) {
            source.sendMessage(Text.literal("  ‚ö†Ô∏è –î–æ—Å–∫–∞ –±—É–¥–µ—Ç –æ—á–∏—â–µ–Ω–∞ –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –∑–∞–ø—Ä–æ—Å–µ!")
                .formatted(Formatting.YELLOW));
        } else {
            source.sendMessage(Text.literal("  ‚úÖ –ö–≤–µ—Å—Ç—ã –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º")
                .formatted(Formatting.GREEN));
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã—Ö –∫–≤–µ—Å—Ç–æ–≤
        if (questCount > 0) {
            source.sendMessage(Text.literal("  –ù–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –∫–≤–µ—Å—Ç—ã:")
                .formatted(Formatting.GRAY));
            
            accumulation.getAccumulatedQuests(playerClass).forEach(quest -> {
                source.sendMessage(Text.literal("    - " + quest.getTitle() + " (ID: " + quest.getId() + ")")
                    .formatted(Formatting.DARK_GRAY));
            });
        }
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞
     */
    private static String getClassDisplayName(String className) {
        switch (className.toLowerCase()) {
            case "cook": return "–ü–æ–≤–∞—Ä";
            case "warrior": return "–í–æ–∏–Ω";
            case "blacksmith": return "–ö—É–∑–Ω–µ—Ü";
            case "brewer": return "–ê–ª—Ö–∏–º–∏–∫";
            case "courier": return "–ö—É—Ä—å–µ—Ä";
            case "miner": return "–®–∞—Ö—Ç–µ—Ä";
            default: return className;
        }
    }
}