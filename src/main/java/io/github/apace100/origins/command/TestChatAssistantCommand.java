package io.github.apace100.origins.command;

import com.mojang.brigadier.CommandDispatcher;
import com.mojang.brigadier.context.CommandContext;
import io.github.apace100.origins.Origins;
import io.github.apace100.origins.quest.ChatAssistantApiClient;
import io.github.apace100.origins.quest.QuestAccumulation;
import net.minecraft.command.CommandRegistryAccess;
import net.minecraft.server.command.CommandManager;
import net.minecraft.server.command.ServerCommandSource;
import net.minecraft.text.Text;
import net.minecraft.util.Formatting;

import java.util.Map;

/**
 * –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —á–∞—Ç-–ø–æ–º–æ—â–Ω–∏–∫–∞ –∏ —Å–∏—Å—Ç–µ–º—ã –∫–≤–µ—Å—Ç–æ–≤
 */
public class TestChatAssistantCommand {
    
    public static void register(CommandDispatcher<ServerCommandSource> dispatcher, CommandRegistryAccess registryAccess) {
        dispatcher.register(CommandManager.literal("test_chat_assistant")
            .requires(source -> source.hasPermissionLevel(2))
            .then(CommandManager.literal("api_status")
                .executes(TestChatAssistantCommand::testApiStatus))
            .then(CommandManager.literal("quest_accumulation")
                .executes(TestChatAssistantCommand::testQuestAccumulation))
            .then(CommandManager.literal("integration")
                .executes(TestChatAssistantCommand::testIntegration))
        );
    }
    
    /**
     * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç—É—Å Chat API
     */
    private static int testApiStatus(CommandContext<ServerCommandSource> context) {
        ServerCommandSource source = context.getSource();
        
        try {
            source.sendFeedback(() -> Text.literal("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Chat API...")
                .formatted(Formatting.YELLOW), true);
            
            ChatAssistantApiClient.isChatApiAvailable()
                .thenAccept(available -> {
                    if (available) {
                        source.sendFeedback(() -> Text.literal("‚úÖ Chat API –¥–æ—Å—Ç—É–ø–µ–Ω!")
                            .formatted(Formatting.GREEN), false);
                        
                        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
                        ChatAssistantApiClient.askQuestion("–ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å –ø–∞–ª–∫–∏?", "1.20.1")
                            .thenAccept(response -> {
                                if (response.success) {
                                    source.sendFeedback(() -> Text.literal("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω!")
                                        .formatted(Formatting.GREEN), false);
                                    source.sendFeedback(() -> Text.literal("üìù –û—Ç–≤–µ—Ç: " + response.answer.substring(0, Math.min(100, response.answer.length())) + "...")
                                        .formatted(Formatting.AQUA), false);
                                } else {
                                    source.sendFeedback(() -> Text.literal("‚ùå –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–µ—É–¥–∞—á–µ–Ω: " + response.errorMessage)
                                        .formatted(Formatting.RED), false);
                                }
                            })
                            .exceptionally(throwable -> {
                                source.sendFeedback(() -> Text.literal("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–æ–≤–æ–º –∑–∞–ø—Ä–æ—Å–µ: " + throwable.getMessage())
                                    .formatted(Formatting.RED), false);
                                return null;
                            });
                    } else {
                        source.sendFeedback(() -> Text.literal("‚ùå Chat API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                            .formatted(Formatting.RED), false);
                    }
                })
                .exceptionally(throwable -> {
                    source.sendFeedback(() -> Text.literal("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ API: " + throwable.getMessage())
                        .formatted(Formatting.RED), false);
                    return null;
                });
            
            return 1;
            
        } catch (Exception e) {
            Origins.LOGGER.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ Chat API", e);
            source.sendError(Text.literal("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: " + e.getMessage()));
            return 0;
        }
    }
    
    /**
     * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –∫–≤–µ—Å—Ç–æ–≤
     */
    private static int testQuestAccumulation(CommandContext<ServerCommandSource> context) {
        ServerCommandSource source = context.getSource();
        
        try {
            source.sendFeedback(() -> Text.literal("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –∫–≤–µ—Å—Ç–æ–≤...")
                .formatted(Formatting.YELLOW), true);
            
            // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è
            Map<String, String> stats = QuestAccumulation.getInstance().getAccumulationStats();
            
            source.sendFeedback(() -> Text.literal("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –∫–≤–µ—Å—Ç–æ–≤:")
                .formatted(Formatting.AQUA), false);
            
            for (Map.Entry<String, String> entry : stats.entrySet()) {
                String className = entry.getKey();
                String stat = entry.getValue();
                
                source.sendFeedback(() -> Text.literal("  üìã " + className + ": " + stat)
                    .formatted(Formatting.WHITE), false);
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            int maxRequests = QuestAccumulation.getInstance().getMaxRequests();
            source.sendFeedback(() -> Text.literal("‚öôÔ∏è –ú–∞–∫—Å–∏–º—É–º –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π: " + maxRequests)
                .formatted(Formatting.GRAY), false);
            
            return 1;
            
        } catch (Exception e) {
            Origins.LOGGER.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –∫–≤–µ—Å—Ç–æ–≤", e);
            source.sendError(Text.literal("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: " + e.getMessage()));
            return 0;
        }
    }
    
    /**
     * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
     */
    private static int testIntegration(CommandContext<ServerCommandSource> context) {
        ServerCommandSource source = context.getSource();
        
        try {
            source.sendFeedback(() -> Text.literal("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")
                .formatted(Formatting.YELLOW), true);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∫–ª–∞—Å—Å—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã
            boolean allClassesLoaded = true;
            String[] testClasses = {
                "ChatAssistantApiClient",
                "ChatMessageAnimator", 
                "QuestAccumulation",
                "MinecraftChatAssistant"
            };
            
            for (String className : testClasses) {
                try {
                    Class.forName("io.github.apace100.origins.quest." + className);
                    source.sendFeedback(() -> Text.literal("‚úÖ " + className + " –∑–∞–≥—Ä—É–∂–µ–Ω")
                        .formatted(Formatting.GREEN), false);
                } catch (ClassNotFoundException e) {
                    try {
                        Class.forName("io.github.apace100.origins.command." + className);
                        source.sendFeedback(() -> Text.literal("‚úÖ " + className + " –∑–∞–≥—Ä—É–∂–µ–Ω")
                            .formatted(Formatting.GREEN), false);
                    } catch (ClassNotFoundException e2) {
                        source.sendFeedback(() -> Text.literal("‚ùå " + className + " –ù–ï –∑–∞–≥—Ä—É–∂–µ–Ω")
                            .formatted(Formatting.RED), false);
                        allClassesLoaded = false;
                    }
                }
            }
            
            if (allClassesLoaded) {
                source.sendFeedback(() -> Text.literal("üéØ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —É—Å–ø–µ—à–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
                    .formatted(Formatting.GREEN), false);
                source.sendFeedback(() -> Text.literal("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /ask \"–∫–∞–∫ —Å–¥–µ–ª–∞—Ç—å –ø–∞–ª–∫–∏\" –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
                    .formatted(Formatting.AQUA), false);
            } else {
                source.sendFeedback(() -> Text.literal("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
                    .formatted(Formatting.RED), false);
            }
            
            return 1;
            
        } catch (Exception e) {
            Origins.LOGGER.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏", e);
            source.sendError(Text.literal("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: " + e.getMessage()));
            return 0;
        }
    }
}