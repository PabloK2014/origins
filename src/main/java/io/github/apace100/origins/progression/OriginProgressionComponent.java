package io.github.apace100.origins.progression;

import dev.onyxstudios.cca.api.v3.component.ComponentKey;
import dev.onyxstudios.cca.api.v3.component.ComponentRegistry;
import dev.onyxstudios.cca.api.v3.component.sync.AutoSyncedComponent;
import dev.onyxstudios.cca.api.v3.component.tick.ServerTickingComponent;
import io.github.apace100.origins.Origins;
import net.minecraft.entity.player.PlayerEntity;
import net.minecraft.nbt.NbtCompound;
import net.minecraft.server.network.ServerPlayerEntity;
import net.minecraft.text.Text;
import net.minecraft.util.Formatting;

import java.util.HashMap;
import java.util.Map;

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–∏ –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏–π –∏–≥—Ä–æ–∫–∞
 */
public class OriginProgressionComponent implements AutoSyncedComponent, ServerTickingComponent {

    public static final ComponentKey<OriginProgressionComponent> KEY =
        ComponentRegistry.getOrCreate(Origins.identifier("progression"), OriginProgressionComponent.class);

    private final PlayerEntity player;
    private final Map<String, OriginProgression> progressions = new HashMap<>();
    private int tickCounter = 0;

    public OriginProgressionComponent(PlayerEntity player) {
        this.player = player;
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å–∏—é –¥–ª—è –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏—è
     */
    public OriginProgression getProgression(String originId) {
        return progressions.computeIfAbsent(originId, OriginProgression::new);
    }

    /**
     * –î–æ–±–∞–≤–∏—Ç—å –æ–ø—ã—Ç –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏—è
     */
    public void addExperience(int exp) {
        if (!(player instanceof ServerPlayerEntity serverPlayer)) return;

        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
        String currentOrigin = getCurrentOriginId(serverPlayer);
        if (currentOrigin == null || currentOrigin.equals("origins:human")) return;

        OriginProgression progression = getProgression(currentOrigin);
        boolean leveledUp = progression.addExperience(exp);

        // –£–≤–µ–¥–æ–º–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–ø—ã—Ç–∞
        if (exp > 0) {
            serverPlayer.sendMessage(Text.literal("+" + exp + " –æ–ø—ã—Ç–∞")
                .formatted(Formatting.GREEN), true);
        }

        // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –ø–æ–≤—ã—à–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è
        if (leveledUp) {
            serverPlayer.sendMessage(Text.literal("üéâ –£—Ä–æ–≤–µ–Ω—å –ø–æ–≤—ã—à–µ–Ω! ")
                .formatted(Formatting.GOLD)
                .append(Text.literal("–£—Ä–æ–≤–µ–Ω—å " + progression.getLevel())
                    .formatted(Formatting.YELLOW)), false);

            // –ó–≤—É–∫–æ–≤–æ–π —ç—Ñ—Ñ–µ–∫—Ç –ø–æ–≤—ã—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è
            serverPlayer.playSound(net.minecraft.sound.SoundEvents.ENTITY_PLAYER_LEVELUP,
                1.0f, 1.0f);
        }

        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å –∫–ª–∏–µ–Ω—Ç–æ–º
        KEY.sync(serverPlayer);
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å ID —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞
     */
    private String getCurrentOriginId(ServerPlayerEntity player) {
        try {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º API Origins –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏—è
            var originComponent = io.github.apace100.origins.component.OriginComponent.KEY.get(player);
            var origin = originComponent.getOrigin(io.github.apace100.origins.origin.OriginLayers.getLayer(
                Origins.identifier("origin")));

            return origin != null ? origin.getIdentifier().toString() : null;
        } catch (Exception e) {
            return null;
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å–∏—é —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏—è
     */
    public OriginProgression getCurrentProgression() {
        if (!(player instanceof ServerPlayerEntity serverPlayer)) return null;

        String currentOrigin = getCurrentOriginId(serverPlayer);
        if (currentOrigin == null) return null;

        return getProgression(currentOrigin);
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –¥–ª—è –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏—è (–¥–ª—è –∫–æ–º–∞–Ω–¥/—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
     */
    public void setLevel(String originId, int level) {
        OriginProgression progression = getProgression(originId);
        progression.setLevel(level);
        progression.setExperience(0);

        if (player instanceof ServerPlayerEntity serverPlayer) {
            KEY.sync(serverPlayer);
        }
    }

    @Override
    public void serverTick() {
        tickCounter++;

        // –ö–∞–∂–¥—ã–µ 20 —Ç–∏–∫–æ–≤ (1 —Å–µ–∫—É–Ω–¥–∞) –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Å—Å–∏–≤–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –æ–ø—ã—Ç–∞
        if (tickCounter % 20 == 0) {
            // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–∞—Å—Å–∏–≤–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –æ–ø—ã—Ç–∞
            // –ù–∞–ø—Ä–∏–º–µ—Ä, –∑–∞ –Ω–æ—à–µ–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏–ª–∏ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö
        }
    }

    @Override
    public void readFromNbt(NbtCompound tag) {
        progressions.clear();

        NbtCompound progressionsNbt = tag.getCompound("progressions");
        for (String key : progressionsNbt.getKeys()) {
            NbtCompound progressionNbt = progressionsNbt.getCompound(key);
            OriginProgression progression = OriginProgression.fromNbt(progressionNbt);
            progressions.put(key, progression);
        }
    }

    @Override
    public void writeToNbt(NbtCompound tag) {
        NbtCompound progressionsNbt = new NbtCompound();

        for (Map.Entry<String, OriginProgression> entry : progressions.entrySet()) {
            progressionsNbt.put(entry.getKey(), entry.getValue().writeToNbt());
        }

        tag.put("progressions", progressionsNbt);
    }
}