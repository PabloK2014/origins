package io.github.apace100.origins.courier.client;

import io.github.apace100.origins.Origins;
import io.github.apace100.origins.courier.ClientOrder;
import io.github.apace100.origins.courier.CourierNetworking;
import io.github.apace100.origins.courier.Order;
import net.fabricmc.fabric.api.client.networking.v1.ClientPlayNetworking;
import net.minecraft.client.MinecraftClient;
import net.minecraft.client.gui.screen.Screen;
import net.minecraft.client.toast.SystemToast;
import net.minecraft.client.toast.ToastManager;
import net.minecraft.nbt.NbtCompound;
import net.minecraft.sound.SoundEvents;
import net.minecraft.text.Text;
import net.minecraft.util.Formatting;

import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;

/**
 * –ö–ª–∏–µ–Ω—Ç—Å–∫–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–∫–∞–∑–æ–≤ –∫—É—Ä—å–µ—Ä–∞
 * –£–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–∫–∞–∑–∞–º–∏ –Ω–∞ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π —Å—Ç–æ—Ä–æ–Ω–µ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
 */
public class ClientOrderManager {
    
    private static ClientOrderManager instance;
    private final ConcurrentMap<UUID, ClientOrder> orders = new ConcurrentHashMap<>();
    private OrdersListScreen currentOrdersScreen = null;
    
    private ClientOrderManager() {}
    
    public static ClientOrderManager getInstance() {
        if (instance == null) {
            instance = new ClientOrderManager();
        }
        return instance;
    }
    
    /**
     * –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–∞–∫–µ—Ç–æ–≤
     */
    public static void registerClientHandlers() {
        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–∫–∞–∑–æ–≤
        ClientPlayNetworking.registerGlobalReceiver(CourierNetworking.SYNC_ORDERS, 
            (client, handler, buf, responseSender) -> {
                try {
                    int orderCount = buf.readInt();
                    List<ClientOrder> newOrders = new ArrayList<>();
                    
                    for (int i = 0; i < orderCount; i++) {
                        NbtCompound orderNbt = buf.readNbt();
                        if (orderNbt != null) {
                            Order order = Order.fromNbt(orderNbt);
                            newOrders.add(ClientOrder.fromOrder(order));
                        }
                    }
                    
                    client.execute(() -> {
                        getInstance().updateOrders(newOrders);
                    });
                    
                } catch (Exception e) {
                    Origins.LOGGER.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∑–∞–∫–∞–∑–æ–≤: " + e.getMessage(), e);
                }
            });
        
        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ
        ClientPlayNetworking.registerGlobalReceiver(CourierNetworking.NEW_ORDER_NOTIFY, 
            (client, handler, buf, responseSender) -> {
                try {
                    UUID orderId = buf.readUuid();
                    String ownerName = buf.readString();
                    String shortDesc = buf.readString();
                    
                    client.execute(() -> {
                        getInstance().showNewOrderNotification(orderId, ownerName, shortDesc);
                    });
                    
                } catch (Exception e) {
                    Origins.LOGGER.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ: " + e.getMessage(), e);
                }
            });
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
        ClientPlayNetworking.registerGlobalReceiver(CourierNetworking.ORDER_STATUS_UPDATE, 
            (client, handler, buf, responseSender) -> {
                try {
                    UUID orderId = buf.readUuid();
                    String statusName = buf.readString();
                    Order.Status status = Order.Status.valueOf(statusName);
                    
                    client.execute(() -> {
                        getInstance().updateOrderStatus(orderId, status);
                    });
                    
                } catch (Exception e) {
                    Origins.LOGGER.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞: " + e.getMessage(), e);
                }
            });
        
        Origins.LOGGER.info("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–∞–∫–µ—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã –∑–∞–∫–∞–∑–æ–≤ –∫—É—Ä—å–µ—Ä–∞");
    }
    
    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤
     */
    public void updateOrders(List<ClientOrder> newOrders) {
        orders.clear();
        for (ClientOrder order : newOrders) {
            orders.put(order.id, order);
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —ç–∫—Ä–∞–Ω —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤, –µ—Å–ª–∏ –æ–Ω –æ—Ç–∫—Ä—ã—Ç
        if (currentOrdersScreen != null) {
            currentOrdersScreen.updateOrders(newOrders);
        }
        
        Origins.LOGGER.debug("–û–±–Ω–æ–≤–ª–µ–Ω–æ {} –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ", newOrders.size());
    }
    
    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
     */
    public void updateOrderStatus(UUID orderId, Order.Status newStatus) {
        ClientOrder order = orders.get(orderId);
        if (order != null) {
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º
            ClientOrder updatedOrder = new ClientOrder(
                order.id, order.ownerName, order.description,
                order.requestItems, order.rewardItems,
                newStatus, order.acceptedByName, order.createdTime
            );
            
            orders.put(orderId, updatedOrder);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —ç–∫—Ä–∞–Ω, –µ—Å–ª–∏ –æ–Ω –æ—Ç–∫—Ä—ã—Ç
            if (currentOrdersScreen != null) {
                currentOrdersScreen.updateOrders(new ArrayList<>(orders.values()));
            }
            
            Origins.LOGGER.debug("–û–±–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ {} –Ω–∞ {}", orderId, newStatus);
        }
    }
    
    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ
     */
    public void showNewOrderNotification(UUID orderId, String ownerName, String shortDesc) {
        MinecraftClient client = MinecraftClient.getInstance();
        if (client == null || client.player == null) return;
        
        try {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º toast —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            ToastManager toastManager = client.getToastManager();
            Text title = Text.literal("–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ—Ç " + ownerName).formatted(Formatting.GREEN);
            Text description = shortDesc.isEmpty() ? 
                Text.literal("–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤") : 
                Text.literal(shortDesc);
            
            SystemToast toast = new SystemToast(SystemToast.Type.TUTORIAL_HINT, title, description);
            toastManager.add(toast);
            
            // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            client.player.playSound(SoundEvents.ENTITY_EXPERIENCE_ORB_PICKUP, 0.5f, 1.0f);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç
            client.player.sendMessage(
                Text.literal("üì¶ ").formatted(Formatting.YELLOW)
                    .append(Text.literal("–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ—Ç ").formatted(Formatting.WHITE))
                    .append(Text.literal(ownerName).formatted(Formatting.AQUA))
                    .append(Text.literal("! –û—Ç–∫—Ä–æ–π—Ç–µ —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.").formatted(Formatting.WHITE)), 
                false
            );
            
            Origins.LOGGER.info("–ü–æ–∫–∞–∑–∞–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ {} –æ—Ç {}", orderId, ownerName);
            
        } catch (Exception e) {
            Origins.LOGGER.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ: " + e.getMessage(), e);
        }
    }
    
    /**
     * –û—Ç–∫—Ä—ã–≤–∞–µ—Ç —ç–∫—Ä–∞–Ω —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤
     */
    public void openOrdersScreen() {
        openOrdersScreen(null);
    }
    
    /**
     * –û—Ç–∫—Ä—ã–≤–∞–µ—Ç —ç–∫—Ä–∞–Ω —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤ —Å –≤—ã–¥–µ–ª–µ–Ω–∏–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
     */
    public void openOrdersScreen(UUID highlightOrderId) {
        MinecraftClient client = MinecraftClient.getInstance();
        if (client != null) {
            currentOrdersScreen = new OrdersListScreen(highlightOrderId);
            client.setScreen(currentOrdersScreen);
        }
    }
    
    /**
     * –ó–∞–∫—Ä—ã–≤–∞–µ—Ç —ç–∫—Ä–∞–Ω —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤
     */
    public void closeOrdersScreen() {
        currentOrdersScreen = null;
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –∑–∞–∫–∞–∑ –ø–æ ID
     */
    public ClientOrder getOrder(UUID orderId) {
        return orders.get(orderId);
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∑–∞–∫–∞–∑—ã
     */
    public List<ClientOrder> getAllOrders() {
        return new ArrayList<>(orders.values());
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
     */
    public int getActiveOrdersCount() {
        return (int) orders.values().stream()
            .filter(ClientOrder::isActive)
            .count();
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–Ω—è—Ç—ã—Ö –∑–∞–∫–∞–∑–æ–≤
     */
    public int getAcceptedOrdersCount() {
        return (int) orders.values().stream()
            .filter(ClientOrder::isAccepted)
            .count();
    }
    
    /**
     * –û—á–∏—â–∞–µ—Ç –≤—Å–µ –∑–∞–∫–∞–∑—ã (–ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞)
     */
    public void clear() {
        orders.clear();
        currentOrdersScreen = null;
        Origins.LOGGER.debug("–û—á–∏—â–µ–Ω—ã –≤—Å–µ –∑–∞–∫–∞–∑—ã –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ");
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –æ—Ç–∫—Ä—ã—Ç –ª–∏ —ç–∫—Ä–∞–Ω –∑–∞–∫–∞–∑–æ–≤
     */
    public boolean isOrdersScreenOpen() {
        return currentOrdersScreen != null;
    }
    
    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–µ–∫—É—â–∏–π —ç–∫—Ä–∞–Ω –∑–∞–∫–∞–∑–æ–≤
     */
    public void setCurrentOrdersScreen(OrdersListScreen screen) {
        this.currentOrdersScreen = screen;
    }
}