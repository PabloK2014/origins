package io.github.apace100.origins.quest;

import io.github.apace100.origins.Origins;
import net.minecraft.server.MinecraftServer;
import net.minecraft.server.command.ServerCommandSource;
import net.minecraft.text.Text;
import net.minecraft.util.Formatting;

import java.util.List;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.TimeUnit;

/**
 * –ö–ª–∞—Å—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ Minecraft
 */
public class ChatMessageAnimator {
    
    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —ç—Ñ—Ñ–µ–∫—Ç–æ–º –ø–µ—á–∞—Ç–∞–Ω–∏—è
     */
    public static void sendAnimatedMessage(ServerCommandSource source, String message, Formatting color) {
        // –°–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∞–Ω–∏—è
        sendTypingIndicator(source, "AI –¥—É–º–∞–µ—Ç");
        
        // –ß–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
        CompletableFuture.delayedExecutor(1, TimeUnit.SECONDS).execute(() -> {
            try {
                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ
                Text formattedMessage;
                if (message.contains("—Ä–µ—Ü–µ–ø—Ç") || message.contains("–∫—Ä–∞—Ñ—Ç")) {
                    formattedMessage = formatCraftingRecipe(message);
                } else if (message.contains("–º–µ—Ö–∞–Ω–∏–∫–∞") || message.contains("—Ä–∞–±–æ—Ç–∞–µ—Ç")) {
                    formattedMessage = formatGameMechanic(message);
                } else {
                    formattedMessage = Text.literal("ü§ñ " + message).formatted(color);
                }
                
                source.sendFeedback(() -> formattedMessage, false);
                
            } catch (Exception e) {
                Origins.LOGGER.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è", e);
                source.sendFeedback(() -> Text.literal("ü§ñ " + message).formatted(color), false);
            }
        });
    }
    
    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∞–Ω–∏—è
     */
    public static void sendTypingIndicator(ServerCommandSource source, String indicator) {
        source.sendFeedback(() -> Text.literal("ü§ñ " + indicator + "...")
            .formatted(Formatting.GRAY), false);
    }
    
    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–Ω–æ–≥–æ—á–∞—Å—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏
     */
    public static void sendMultipartMessage(ServerCommandSource source, List<String> parts, int delayTicks) {
        if (parts.isEmpty()) return;
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å —Å—Ä–∞–∑—É
        source.sendFeedback(() -> Text.literal("ü§ñ " + parts.get(0))
            .formatted(Formatting.AQUA), false);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —á–∞—Å—Ç–∏ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
        for (int i = 1; i < parts.size(); i++) {
            final int partIndex = i;
            final String part = parts.get(i);
            
            CompletableFuture.delayedExecutor(delayTicks * i * 50, TimeUnit.MILLISECONDS).execute(() -> {
                try {
                    source.sendFeedback(() -> Text.literal("   " + part)
                        .formatted(Formatting.WHITE), false);
                } catch (Exception e) {
                    Origins.LOGGER.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —á–∞—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è " + partIndex, e);
                }
            });
        }
    }
    
    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ—Ü–µ–ø—Ç –∫—Ä–∞—Ñ—Ç–∞ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
     */
    private static Text formatCraftingRecipe(String recipe) {
        Text baseText = Text.literal("üî® ").formatted(Formatting.GOLD);
        
        // –†–∞–∑–±–∏–≤–∞–µ–º —Ä–µ—Ü–µ–ø—Ç –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é
        String[] lines = recipe.split("\n");
        Text result = baseText;
        
        for (int i = 0; i < lines.length; i++) {
            String line = lines[i].trim();
            if (line.isEmpty()) continue;
            
            if (i == 0) {
                // –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ - –∑–∞–≥–æ–ª–æ–≤–æ–∫
                result = result.copy().append(Text.literal(line).formatted(Formatting.YELLOW));
            } else if (line.contains("‚Üí") || line.contains("=")) {
                // –°—Ç—Ä–æ–∫–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∫—Ä–∞—Ñ—Ç–∞
                result = result.copy().append(Text.literal("\n   ").formatted(Formatting.WHITE))
                    .append(Text.literal(line).formatted(Formatting.GREEN));
            } else {
                // –û–±—ã—á–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Ä–µ—Ü–µ–ø—Ç–∞
                result = result.copy().append(Text.literal("\n   ").formatted(Formatting.WHITE))
                    .append(Text.literal(line).formatted(Formatting.AQUA));
            }
        }
        
        return result;
    }
    
    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–π –º–µ—Ö–∞–Ω–∏–∫–∏
     */
    private static Text formatGameMechanic(String mechanic) {
        Text baseText = Text.literal("‚öôÔ∏è ").formatted(Formatting.BLUE);
        
        String[] lines = mechanic.split("\n");
        Text result = baseText;
        
        for (int i = 0; i < lines.length; i++) {
            String line = lines[i].trim();
            if (line.isEmpty()) continue;
            
            if (i == 0) {
                // –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ - –∑–∞–≥–æ–ª–æ–≤–æ–∫
                result = result.copy().append(Text.literal(line).formatted(Formatting.AQUA));
            } else if (line.startsWith("‚Ä¢") || line.startsWith("-") || line.startsWith("*")) {
                // –ü—É–Ω–∫—Ç —Å–ø–∏—Å–∫–∞
                result = result.copy().append(Text.literal("\n   ").formatted(Formatting.WHITE))
                    .append(Text.literal(line).formatted(Formatting.YELLOW));
            } else {
                // –û–±—ã—á–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è
                result = result.copy().append(Text.literal("\n   ").formatted(Formatting.WHITE))
                    .append(Text.literal(line).formatted(Formatting.WHITE));
            }
        }
        
        return result;
    }
    
    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
     */
    public static void sendErrorMessage(ServerCommandSource source, String errorMessage) {
        source.sendFeedback(() -> Text.literal("‚ùå ").formatted(Formatting.RED)
            .append(Text.literal(errorMessage).formatted(Formatting.GRAY)), false);
    }
    
    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
     */
    public static void sendLoadingMessage(ServerCommandSource source, String loadingText) {
        source.sendFeedback(() -> Text.literal("‚è≥ ").formatted(Formatting.YELLOW)
            .append(Text.literal(loadingText).formatted(Formatting.GRAY)), false);
    }
    
    /**
     * –†–∞–∑–±–∏–≤–∞–µ—Ç –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
     */
    public static List<String> splitLongMessage(String message, int maxLength) {
        if (message.length() <= maxLength) {
            return List.of(message);
        }
        
        java.util.List<String> parts = new java.util.ArrayList<>();
        String[] words = message.split(" ");
        StringBuilder currentPart = new StringBuilder();
        
        for (String word : words) {
            if (currentPart.length() + word.length() + 1 > maxLength) {
                if (currentPart.length() > 0) {
                    parts.add(currentPart.toString().trim());
                    currentPart = new StringBuilder();
                }
            }
            
            if (currentPart.length() > 0) {
                currentPart.append(" ");
            }
            currentPart.append(word);
        }
        
        if (currentPart.length() > 0) {
            parts.add(currentPart.toString().trim());
        }
        
        return parts;
    }
}