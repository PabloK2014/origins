package io.github.apace100.origins.quest;

import com.google.gson.Gson;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import io.github.apace100.origins.Origins;

import java.io.IOException;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;
import java.util.concurrent.CompletableFuture;

/**
 * HTTP –∫–ª–∏–µ–Ω—Ç –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å —á–∞—Ç-–ø–æ–º–æ—â–Ω–∏–∫–æ–º AI API
 */
public class ChatAssistantApiClient {
    private static final String API_BASE_URL = "http://localhost:8000";
    private static final HttpClient httpClient = HttpClient.newBuilder()
            .connectTimeout(Duration.ofSeconds(30))
            .version(HttpClient.Version.HTTP_1_1) // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º HTTP/1.1
            .build();
    private static final Gson gson = new Gson();
    
    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–æ–ø—Ä–æ—Å –∫ AI –∏ –ø–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç
     */
    public static CompletableFuture<ChatResponse> askQuestion(String question, String minecraftVersion) {
        return CompletableFuture.supplyAsync(() -> {
            try {
                String url = API_BASE_URL + "/chat/ask";
                Origins.LOGGER.info("ü§ñ [ChatAssistant] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –∫ AI: " + question);
                
                // –°–æ–∑–¥–∞–µ–º JSON –∑–∞–ø—Ä–æ—Å —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏ –ø–æ–ª–µ–π –¥–ª—è FastAPI
                JsonObject requestJson = new JsonObject();
                requestJson.addProperty("question", question);
                requestJson.addProperty("minecraft_version", minecraftVersion);
                // context –ø–æ–ª–µ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ, –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –µ—Å–ª–∏ null
                String jsonBody = gson.toJson(requestJson);
                
                Origins.LOGGER.info("ü§ñ [ChatAssistant] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º JSON: " + jsonBody);
                
                HttpRequest httpRequest = HttpRequest.newBuilder()
                        .uri(URI.create(url))
                        .timeout(Duration.ofSeconds(60)) // –¢–∞–π–º–∞—É—Ç 1 –º–∏–Ω—É—Ç–∞
                        .header("Content-Type", "application/json")
                        .POST(HttpRequest.BodyPublishers.ofString(jsonBody))
                        .build();
                
                HttpResponse<String> response = httpClient.send(httpRequest, HttpResponse.BodyHandlers.ofString());
                
                Origins.LOGGER.info("üì° [ChatAssistant] API RESPONSE: Status " + response.statusCode());
                
                if (response.statusCode() == 200) {
                    ChatResponse chatResponse = parseChatResponse(response.body());
                    Origins.LOGGER.info("‚úÖ [ChatAssistant] –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç AI: " + chatResponse.answer.substring(0, Math.min(50, chatResponse.answer.length())) + "...");
                    return chatResponse;
                } else {
                    Origins.LOGGER.error("‚ùå [ChatAssistant] API ERROR: Status " + response.statusCode());
                    Origins.LOGGER.error("Response body: " + response.body());
                    
                    if (response.statusCode() == 422) {
                        Origins.LOGGER.error("üî• [ChatAssistant] Validation error - check JSON structure");
                        Origins.LOGGER.error("Sent JSON: " + jsonBody);
                    }
                    
                    return new ChatResponse("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ AI. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", false, "API Error: " + response.statusCode(), "error");
                }
                
            } catch (IOException | InterruptedException e) {
                Origins.LOGGER.error("üî• [ChatAssistant] API EXCEPTION: " + e.getMessage());
                return new ChatResponse("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å AI —Å–µ—Ä–≤–∏—Å–æ–º. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ.", false, e.getMessage(), "error");
            }
        });
    }
    
    /**
     * –ü–∞—Ä—Å–∏—Ç JSON –æ—Ç–≤–µ—Ç –æ—Ç API –≤ –æ–±—ä–µ–∫—Ç ChatResponse
     */
    private static ChatResponse parseChatResponse(String jsonResponse) {
        try {
            JsonObject responseObj = JsonParser.parseString(jsonResponse).getAsJsonObject();
            
            String answer = responseObj.get("answer").getAsString();
            boolean success = responseObj.get("success").getAsBoolean();
            String errorMessage = responseObj.has("error_message") && !responseObj.get("error_message").isJsonNull() 
                ? responseObj.get("error_message").getAsString() : null;
            String responseType = responseObj.has("response_type") 
                ? responseObj.get("response_type").getAsString() : "general";
            
            return new ChatResponse(answer, success, errorMessage, responseType);
            
        } catch (Exception e) {
            Origins.LOGGER.error("üî• [ChatAssistant] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç API", e);
            return new ChatResponse("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞.", false, e.getMessage(), "error");
        }
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Chat API
     */
    public static CompletableFuture<Boolean> isChatApiAvailable() {
        return CompletableFuture.supplyAsync(() -> {
            try {
                HttpRequest request = HttpRequest.newBuilder()
                        .uri(URI.create(API_BASE_URL + "/"))
                        .timeout(Duration.ofSeconds(10))
                        .GET()
                        .build();
                
                HttpResponse<String> response = httpClient.send(request, HttpResponse.BodyHandlers.ofString());
                
                boolean isAvailable = response.statusCode() == 200;
                Origins.LOGGER.info("üîç [ChatAssistant] API Health Check: " + (isAvailable ? "‚úÖ AVAILABLE" : "‚ùå UNAVAILABLE") + " (Status: " + response.statusCode() + ")");
                
                return isAvailable;
                
            } catch (Exception e) {
                Origins.LOGGER.warn("üîç [ChatAssistant] API Health Check: ‚ùå EXCEPTION - " + e.getMessage());
                return false;
            }
        });
    }
    
    /**
     * –ö–ª–∞—Å—Å –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ —á–∞—Ç API
     */
    public static class ChatRequest {
        public final String question;
        public final String minecraft_version;
        public final String context;
        
        public ChatRequest(String question, String minecraftVersion, String context) {
            this.question = question;
            this.minecraft_version = minecraftVersion;
            this.context = context;
        }
    }
    
    /**
     * –ö–ª–∞—Å—Å –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç —á–∞—Ç API
     */
    public static class ChatResponse {
        public final String answer;
        public final boolean success;
        public final String errorMessage;
        public final String responseType;
        
        public ChatResponse(String answer, boolean success, String errorMessage, String responseType) {
            this.answer = answer;
            this.success = success;
            this.errorMessage = errorMessage;
            this.responseType = responseType;
        }
    }
}