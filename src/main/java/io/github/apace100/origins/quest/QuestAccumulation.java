package io.github.apace100.origins.quest;

import io.github.apace100.origins.Origins;

import java.util.*;
import java.util.concurrent.ConcurrentHashMap;

/**
 * –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–µ–º –∫–≤–µ—Å—Ç–æ–≤ –≤ –¥–æ—Å–∫–∞—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π
 */
public class QuestAccumulation {
    private static final QuestAccumulation INSTANCE = new QuestAccumulation();
    
    // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π –¥–æ—Å–∫–∏
    private static final int MAX_REQUESTS = 3;
    
    // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–≤–µ—Å—Ç–æ–≤ –∑–∞ –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å
    private static final int QUESTS_PER_REQUEST = 5;
    
    // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–≤–µ—Å—Ç–æ–≤ –≤ –¥–æ—Å–∫–µ (3 –∑–∞–ø—Ä–æ—Å–∞ * 5 –∫–≤–µ—Å—Ç–æ–≤ = 15)
    private static final int MAX_QUESTS_IN_BOARD = MAX_REQUESTS * QUESTS_PER_REQUEST;
    
    // –ù–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –∫–≤–µ—Å—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª–∞—Å—Å–∞
    private final Map<String, List<Quest>> accumulatedQuests = new ConcurrentHashMap<>();
    
    // –°—á–µ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª–∞—Å—Å–∞
    private final Map<String, Integer> requestCounts = new ConcurrentHashMap<>();
    
    private QuestAccumulation() {}
    
    public static QuestAccumulation getInstance() {
        return INSTANCE;
    }
    
    /**
     * –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–µ –∫–≤–µ—Å—Ç—ã –∫ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–º –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞
     */
    public List<Quest> addQuestsForClass(String playerClass, List<Quest> newQuests) {
        return addQuestsForClass(playerClass, newQuests, null);
    }
    
    /**
     * –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–µ –∫–≤–µ—Å—Ç—ã –∫ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–º –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
     */
    public List<Quest> addQuestsForClass(String playerClass, List<Quest> newQuests, net.minecraft.server.MinecraftServer server) {
        if (newQuests == null || newQuests.isEmpty()) {
            Origins.LOGGER.warn("üîÑ [QuestAccumulation] –ü–æ–ø—ã—Ç–∫–∞ –¥–æ–±–∞–≤–∏—Ç—å –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –∫–≤–µ—Å—Ç–æ–≤ –¥–ª—è –∫–ª–∞—Å—Å–∞: " + playerClass);
            return getAccumulatedQuests(playerClass);
        }
        
        Origins.LOGGER.info("üîÑ [QuestAccumulation] –î–æ–±–∞–≤–ª—è–µ–º " + newQuests.size() + " –Ω–æ–≤—ã—Ö –∫–≤–µ—Å—Ç–æ–≤ –¥–ª—è –∫–ª–∞—Å—Å–∞: " + playerClass);
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –∫–≤–µ—Å—Ç—ã
        List<Quest> accumulated = accumulatedQuests.computeIfAbsent(playerClass, k -> new ArrayList<>());
        
        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤
        int currentRequestCount = requestCounts.getOrDefault(playerClass, 0) + 1;
        
        Origins.LOGGER.info("üî¢ [QuestAccumulation] –ó–∞–ø—Ä–æ—Å #" + currentRequestCount + " –¥–ª—è –∫–ª–∞—Å—Å–∞: " + playerClass);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—á–∏—Å—Ç–∏—Ç—å –¥–æ—Å–∫—É (–ø–æ—Å–ª–µ 3 –∑–∞–ø—Ä–æ—Å–æ–≤)
        boolean boardCleared = false;
        if (currentRequestCount > MAX_REQUESTS) {
            Origins.LOGGER.info("üóëÔ∏è [QuestAccumulation] –û—á–∏—â–∞–µ–º –¥–æ—Å–∫—É –¥–ª—è –∫–ª–∞—Å—Å–∞ " + playerClass + " –ø–æ—Å–ª–µ " + MAX_REQUESTS + " –∑–∞–ø—Ä–æ—Å–æ–≤");
            accumulated.clear();
            currentRequestCount = 1;
            boardCleared = true;
            
            // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± –æ—á–∏—Å—Ç–∫–µ –¥–æ—Å–∫–∏
            Origins.LOGGER.info("üîÑ [QuestAccumulation] –î–æ—Å–∫–∞ –æ—á–∏—â–µ–Ω–∞, –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π —Ü–∏–∫–ª –¥–ª—è –∫–ª–∞—Å—Å–∞: " + playerClass);
            if (server != null) {
                QuestApiChatLogger.logBoardCleared(server, playerClass);
            }
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∫–≤–µ—Å—Ç—ã
        accumulated.addAll(newQuests);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
        requestCounts.put(playerClass, currentRequestCount);
        accumulatedQuests.put(playerClass, accumulated);
        
        Origins.LOGGER.info("üìä [QuestAccumulation] –ò—Ç–æ–≥–æ –∫–≤–µ—Å—Ç–æ–≤ –¥–ª—è " + playerClass + ": " + accumulated.size() + 
            " (–∑–∞–ø—Ä–æ—Å " + currentRequestCount + "/" + MAX_REQUESTS + ")");
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–∏ –∫–≤–µ—Å—Ç–æ–≤
        if (server != null) {
            QuestApiChatLogger.logQuestAccumulation(server, playerClass, newQuests.size(), accumulated.size(), currentRequestCount, MAX_REQUESTS);
        }
        
        // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã—Ö –∫–≤–µ—Å—Ç–æ–≤
        for (int i = 0; i < accumulated.size(); i++) {
            Quest quest = accumulated.get(i);
            Origins.LOGGER.info("  " + (i+1) + ". " + quest.getTitle() + " (ID: " + quest.getId() + ")");
        }
        
        return new ArrayList<>(accumulated);
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –∫–≤–µ—Å—Ç—ã –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞
     */
    public List<Quest> getAccumulatedQuests(String playerClass) {
        List<Quest> accumulated = accumulatedQuests.getOrDefault(playerClass, new ArrayList<>());
        return new ArrayList<>(accumulated);
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞
     */
    public int getRequestCount(String playerClass) {
        return requestCounts.getOrDefault(playerClass, 0);
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π
     */
    public int getMaxRequests() {
        return MAX_REQUESTS;
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –æ—á–∏—Å—Ç–∏—Ç—å –¥–æ—Å–∫—É –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –∑–∞–ø—Ä–æ—Å–µ
     */
    public boolean shouldClearOnNextRequest(String playerClass) {
        return getRequestCount(playerClass) >= MAX_REQUESTS;
    }
    
    /**
     * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–∞–µ—Ç –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –∫–≤–µ—Å—Ç—ã –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞
     */
    public void clearAccumulatedQuests(String playerClass) {
        Origins.LOGGER.info("üóëÔ∏è [QuestAccumulation] –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫–≤–µ—Å—Ç–æ–≤ –¥–ª—è –∫–ª–∞—Å—Å–∞: " + playerClass);
        accumulatedQuests.remove(playerClass);
        requestCounts.remove(playerClass);
    }
    
    /**
     * –û—á–∏—â–∞–µ—Ç –≤—Å–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –∫–≤–µ—Å—Ç—ã
     */
    public void clearAllAccumulatedQuests() {
        Origins.LOGGER.info("üóëÔ∏è [QuestAccumulation] –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã—Ö –∫–≤–µ—Å—Ç–æ–≤");
        accumulatedQuests.clear();
        requestCounts.clear();
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –∫–≤–µ—Å—Ç–æ–≤
     */
    public Map<String, String> getAccumulationStats() {
        Map<String, String> stats = new HashMap<>();
        
        for (String playerClass : Arrays.asList("cook", "courier", "brewer", "blacksmith", "miner", "warrior")) {
            int questCount = getAccumulatedQuests(playerClass).size();
            int requestCount = getRequestCount(playerClass);
            
            stats.put(playerClass, questCount + " –∫–≤–µ—Å—Ç–æ–≤ (–∑–∞–ø—Ä–æ—Å " + requestCount + "/" + MAX_REQUESTS + ")");
        }
        
        return stats;
    }
}