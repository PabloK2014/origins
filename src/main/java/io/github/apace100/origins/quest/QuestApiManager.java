package io.github.apace100.origins.quest;

import io.github.apace100.origins.Origins;
import net.minecraft.item.ItemStack;
import net.minecraft.server.world.ServerWorld;

import java.util.*;
import java.util.concurrent.ConcurrentHashMap;

/**
 * –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ –∫–≤–µ—Å—Ç–æ–≤ —á–µ—Ä–µ–∑ API
 */
public class QuestApiManager {
    private static final QuestApiManager INSTANCE = new QuestApiManager();
    
    // –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ —Ç–∏–∫–∞—Ö (30 –º–∏–Ω—É—Ç = 30 * 60 * 20 = 36000 —Ç–∏–∫–æ–≤)
    private static final long UPDATE_INTERVAL_TICKS = 36000L;
    
    // –ö—ç—à –∫–≤–µ—Å—Ç–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª–∞—Å—Å–∞
    private final Map<String, List<Quest>> questCache = new ConcurrentHashMap<>();
    
    // –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª–∞—Å—Å–∞
    private final Map<String, Long> lastUpdateTime = new ConcurrentHashMap<>();
    
    // –§–ª–∞–≥ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
    private boolean apiAvailable = false;
    private long lastApiCheck = 0;
    private static final long API_CHECK_INTERVAL = 12000L; // –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç (12000 —Ç–∏–∫–æ–≤)
    private boolean isCheckingApi = false; // –§–ª–∞–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
    private boolean isLoadingQuests = false; // –§–ª–∞–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫ –∫–≤–µ—Å—Ç–æ–≤
    private long lastQuestLoadAttempt = 0; // –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–≤–µ—Å—Ç–æ–≤
    private static final long MIN_LOAD_INTERVAL = 1200L; // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ –∑–∞–≥—Ä—É–∑–∫–∏ (1 –º–∏–Ω—É—Ç–∞)
    
    // –ö–ª–∞—Å—Å—ã –∏–≥—Ä–æ–∫–æ–≤
    private static final String[] PLAYER_CLASSES = {
        "cook", "courier", "brewer", "blacksmith", "miner", "warrior"
    };
    
    private QuestApiManager() {}
    
    public static QuestApiManager getInstance() {
        return INSTANCE;
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É –∫–≤–µ—Å—Ç–æ–≤
     */
    public void initialize(ServerWorld world) {
        Origins.LOGGER.info("Initializing Quest API Manager...");
        
        checkApiAvailability(world);
    }
    
    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–æ—Å–∫—É –æ–±—ä—è–≤–ª–µ–Ω–∏–π –∫–≤–µ—Å—Ç–∞–º–∏ –∏–∑ –∫—ç—à–∞ (—Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è)
     */
    public void updateBoard(ClassBountyBoardBlockEntity board) {
        String boardClass = board.getBoardClass();
        
        // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –∫–≤–µ—Å—Ç—ã –∏–∑ —Å–∏—Å—Ç–µ–º—ã –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è
        List<Quest> accumulatedQuests = QuestAccumulation.getInstance().getAccumulatedQuests(boardClass);
        
        // –ï—Å–ª–∏ –≤ —Å–∏—Å—Ç–µ–º–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –Ω–µ—Ç –∫–≤–µ—Å—Ç–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à
        if (accumulatedQuests.isEmpty()) {
            accumulatedQuests = questCache.getOrDefault(boardClass, new ArrayList<>());
        }
        
        // –í–°–ï–ì–î–ê –æ—á–∏—â–∞–µ–º –¥–æ—Å–∫—É —Å–Ω–∞—á–∞–ª–∞
        board.getBounties().clear();
        
        if (!accumulatedQuests.isEmpty()) {
            // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥–æ 21 –∫–≤–µ—Å—Ç–∞ (—Ä–∞–∑–º–µ—Ä –¥–æ—Å–∫–∏)
            int questsToShow = Math.min(accumulatedQuests.size(), 21);
            
            for (int i = 0; i < questsToShow; i++) {
                Quest quest = accumulatedQuests.get(i);
                ItemStack questTicket = QuestTicketItem.createQuestTicket(quest);
                if (!questTicket.isEmpty()) {
                    board.getBounties().setStack(i, questTicket);
                }
            }
            
            board.markDirty();
            
            // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è
            int requestCount = QuestAccumulation.getInstance().getRequestCount(boardClass);
            int maxRequests = QuestAccumulation.getInstance().getMaxRequests();
            
            Origins.LOGGER.info("Updated board for class: " + boardClass + " with " + questsToShow + " quests " +
                "(–Ω–∞–∫–æ–ø–ª–µ–Ω–æ: " + accumulatedQuests.size() + ", –∑–∞–ø—Ä–æ—Å " + requestCount + "/" + maxRequests + ")");
        } else {
            // –î–æ—Å–∫–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –ø—É—Å—Ç–æ–π –¥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–≤–µ—Å—Ç–æ–≤ –æ—Ç API
            Origins.LOGGER.info("Board for class " + boardClass + " remains empty - waiting for API response");
        }
    }
    
    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –∫–≤–µ—Å—Ç—ã –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏
     */
    public void tick(ServerWorld world) {
        long currentTime = world.getTime();
        
        if (currentTime - lastApiCheck > API_CHECK_INTERVAL) {
            checkApiAvailability(world);
            lastApiCheck = currentTime;
        }
        
        if (!apiAvailable) {
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        Long firstClassLastUpdate = lastUpdateTime.get(PLAYER_CLASSES[0]);
        if (firstClassLastUpdate != null) {
            long timeSinceLastUpdate = currentTime - firstClassLastUpdate;
            long timeUntilNextUpdate = UPDATE_INTERVAL_TICKS - timeSinceLastUpdate;
            
            // –û–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á–µ—Ç –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ (–∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç)
            if (currentTime % (5 * 60 * 20) == 0) { // –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
                int minutesLeft = (int) (timeUntilNextUpdate / (20 * 60));
                if (minutesLeft > 0) {
                    QuestApiChatLogger.logCountdownToNextRequest(world.getServer(), minutesLeft);
                }
            }
            
            // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞ 1 –º–∏–Ω—É—Ç—É (1200 —Ç–∏–∫–æ–≤) –¥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            if (timeUntilNextUpdate <= 1200 && timeUntilNextUpdate > 1180) {
                QuestApiChatLogger.logQuestUpdateWarning(world.getServer(), 1);
            }
            
            // –í—Ä–µ–º—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            if (timeSinceLastUpdate >= UPDATE_INTERVAL_TICKS) {
                Origins.LOGGER.info("üîÑ Time to update all quests via optimized API...");
                loadAllQuests(world);
            }
        } else {
            // –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ - –∑–∞–≥—Ä—É–∂–∞–µ–º –∫–≤–µ—Å—Ç—ã —Å—Ä–∞–∑—É
            Origins.LOGGER.info("üöÄ First time loading quests...");
            loadAllQuests(world);
        }
    }
    
    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–≤–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∫–ª–∞—Å—Å–æ–≤ —á–µ—Ä–µ–∑ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
     */
    private void loadAllQuests(ServerWorld world) {
        long currentTime = world.getTime();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ–º –ª–∏ –º—ã —É–∂–µ –∫–≤–µ—Å—Ç—ã
        if (isLoadingQuests) {
            Origins.LOGGER.info("‚è≥ Already loading quests, skipping...");
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ –∑–∞–≥—Ä—É–∑–∫–∏
        if (currentTime - lastQuestLoadAttempt < MIN_LOAD_INTERVAL) {
            Origins.LOGGER.info("‚è≥ Too soon to load quests again, waiting...");
            return;
        }
        
        isLoadingQuests = true;
        lastQuestLoadAttempt = currentTime;
        
        Origins.LOGGER.info("üöÄ Loading quests for ALL classes with separate async requests...");
        
        QuestApiChatLogger.logApiRequest(world.getServer(), "ALL CLASSES (6 separate requests)", 30); // 6 –∫–ª–∞—Å—Å–æ–≤ * 5 –∫–≤–µ—Å—Ç–æ–≤
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ —Å –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏
        QuestApiClient.getAllQuestsSeparately(5)
            .thenCompose(allQuests -> {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–ª–∞—Å—Å—ã –±–µ–∑ –∫–≤–µ—Å—Ç–æ–≤, –∏ –ø–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –Ω–∏—Ö
                return QuestApiClient.retryMissingClasses(allQuests, 5);
            })
            .thenAccept(allQuests -> {
                try {
                    if (!allQuests.isEmpty()) {
                        long updateTime = world.getTime();
                        int totalQuests = 0;
                        int successfulClasses = 0;
                        
                        for (String playerClass : PLAYER_CLASSES) {
                            List<Quest> classQuests = allQuests.getOrDefault(playerClass, new ArrayList<>());
                            
                            if (!classQuests.isEmpty()) {
                                successfulClasses++;
                                
                                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–≤–µ—Å—Ç–æ–≤ –¥–ª—è –∫–ª–∞—Å—Å–∞
                                QuestApiChatLogger.logClassQuestsGenerated(world.getServer(), playerClass, classQuests.size());
                                
                                // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º—É –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –∫–≤–µ—Å—Ç–æ–≤ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
                                List<Quest> accumulatedQuests = QuestAccumulation.getInstance().addQuestsForClass(playerClass, classQuests, world.getServer());
                                
                                // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à —Å –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–º–∏ –∫–≤–µ—Å—Ç–∞–º–∏
                                questCache.put(playerClass, accumulatedQuests);
                                lastUpdateTime.put(playerClass, updateTime);
                                totalQuests += accumulatedQuests.size();
                                
                                Origins.LOGGER.info("üìã Loaded " + classQuests.size() + " new quests for class: " + playerClass);
                                Origins.LOGGER.info("üìä Total accumulated quests for " + playerClass + ": " + accumulatedQuests.size());
                                
                                // –î–µ—Ç–∞–ª—å–Ω—ã–π –ª–æ–≥ –Ω–æ–≤—ã—Ö –∫–≤–µ—Å—Ç–æ–≤
                                for (int i = 0; i < classQuests.size(); i++) {
                                    Quest quest = classQuests.get(i);
                                    Origins.LOGGER.info("  New Quest " + (i+1) + ": " + quest.getTitle() + " (ID: " + quest.getId() + ")");
                                }
                                
                                updateBoardsForClass(playerClass, world);
                            } else {
                                Origins.LOGGER.warn("‚ùå No quests received for class: " + playerClass);
                            }
                        }
                        
                        Origins.LOGGER.info("üéØ SEPARATE REQUESTS COMPLETED: " + totalQuests + " total quests loaded for " + successfulClasses + "/" + PLAYER_CLASSES.length + " classes");
                        
                        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
                        QuestApiChatLogger.logSeparateRequestsResult(world.getServer(), successfulClasses, PLAYER_CLASSES.length, totalQuests);
                        
                        if (totalQuests > 0) {
                            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –∫–≤–µ—Å—Ç—ã –ø–æ—è–≤–∏–ª–∏—Å—å
                            QuestApiChatLogger.logQuestsAppeared(world.getServer(), totalQuests);
                        } else {
                            QuestApiChatLogger.logApiError(world.getServer(), "ALL CLASSES", "–ù–µ –ø–æ–ª—É—á–µ–Ω–æ –∫–≤–µ—Å—Ç–æ–≤ –Ω–∏ –¥–ª—è –æ–¥–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞");
                        }
                    } else {
                        Origins.LOGGER.warn("‚ùå No quests received from separate API requests");
                        QuestApiChatLogger.logApiError(world.getServer(), "ALL CLASSES", "–ù–µ –ø–æ–ª—É—á–µ–Ω–æ –∫–≤–µ—Å—Ç–æ–≤");
                    }
                } finally {
                    isLoadingQuests = false; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
                }
            })
            .exceptionally(throwable -> {
                try {
                    Origins.LOGGER.error("üî• Failed to load quests from separate API requests", throwable);
                    QuestApiChatLogger.logDetailedApiError(world.getServer(), "ALL CLASSES", throwable.getMessage(), true);
                    
                    // –ü—Ä–∏ –æ—à–∏–±–∫–µ –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
                    // –≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç —Å–∏—Å—Ç–µ–º–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ MIN_LOAD_INTERVAL
                    Origins.LOGGER.info("üîÑ Will retry quest loading after minimum interval");
                    
                } finally {
                    isLoadingQuests = false; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
                }
                return null;
            });
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Å–µ –¥–æ—Å–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞
     */
    private void updateBoardsForClass(String playerClass, ServerWorld world) {
        List<Quest> quests = questCache.get(playerClass);
        if (quests == null || quests.isEmpty()) {
            Origins.LOGGER.warn("No quests to update boards for class: " + playerClass);
            return;
        }
        
        Origins.LOGGER.info("Updating boards for class: " + playerClass + " with " + quests.size() + " quests");
        
        // –î–æ—Å–∫–∏ –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –Ω–∏–º
        // —á–µ—Ä–µ–∑ –º–µ—Ç–æ–¥ updateBoard –≤ ClassBountyBoardBlockEntity
        Origins.LOGGER.info("Quests updated for class " + playerClass + ". Boards will refresh automatically.");
        
        for (Quest quest : quests) {
            Origins.LOGGER.info("  Available quest: " + quest.getTitle() + " (ID: " + quest.getId() + ")");
        }
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –∫–≤–µ—Å—Ç—ã –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞ –∏–∑ –∫—ç—à–∞
     */
    public List<Quest> getQuestsForClass(String playerClass) {
        return questCache.getOrDefault(playerClass, new ArrayList<>());
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –≤—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ —Ç–∏–∫–∞—Ö
     */
    public long getTimeUntilNextUpdate(String playerClass, ServerWorld world) {
        Long lastUpdate = lastUpdateTime.get(playerClass);
        if (lastUpdate == null) {
            return 0;
        }
        
        long currentTime = world.getTime();
        long timeSinceUpdate = currentTime - lastUpdate;
        return Math.max(0, UPDATE_INTERVAL_TICKS - timeSinceUpdate);
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –≤—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –º–∏–Ω—É—Ç–∞—Ö
     */
    public int getMinutesUntilNextUpdate(String playerClass, ServerWorld world) {
        long ticksUntilUpdate = getTimeUntilNextUpdate(playerClass, world);
        return (int) (ticksUntilUpdate / (20 * 60));
    }
    
    /**
     * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∫–≤–µ—Å—Ç—ã –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞
     */
    public void forceUpdateClass(String playerClass, ServerWorld world) {
        Origins.LOGGER.info("Force updating quests for class: " + playerClass);
        loadAllQuests(world); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å –¥–ª—è –≤—Å–µ—Ö –∫–ª–∞—Å—Å–æ–≤
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
     */
    private void checkApiAvailability(ServerWorld world) {
        if (isCheckingApi) {
            Origins.LOGGER.info("‚è≥ API check already in progress, skipping...");
            return;
        }
        
        isCheckingApi = true;
        Origins.LOGGER.info("üîç Starting API availability check...");
        
        QuestApiClient.isApiAvailable()
            .thenAccept(available -> {
                isCheckingApi = false;
                
                if (available != apiAvailable) {
                    apiAvailable = available;
                    if (available) {
                        Origins.LOGGER.info("‚úÖ Quest API is now AVAILABLE!");
                        QuestApiChatLogger.logApiConnected(world.getServer());
                        QuestApiChatLogger.logQuestUpdate(world.getServer());
                        loadAllQuests(world);
                    } else {
                        Origins.LOGGER.warn("‚ùå Quest API is NOT AVAILABLE");
                        QuestApiChatLogger.logApiUnavailable(world.getServer());
                    }
                } else {
                    Origins.LOGGER.info("üîÑ API status unchanged: " + (available ? "AVAILABLE" : "UNAVAILABLE"));
                }
            })
            .exceptionally(throwable -> {
                isCheckingApi = false;
                if (apiAvailable) {
                    Origins.LOGGER.warn("üî• Quest API became unavailable due to exception: " + throwable.getMessage());
                    QuestApiChatLogger.logApiUnavailable(world.getServer());
                    apiAvailable = false;
                } else {
                    Origins.LOGGER.warn("üî• API check failed: " + throwable.getMessage());
                }
                return null;
            });
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
     */
    public boolean isApiAvailable() {
        return apiAvailable;
    }
    
    /**
     * –°–æ–∑–¥–∞–µ—Ç ItemStack –±–∏–ª–µ—Ç–∞ –∫–≤–µ—Å—Ç–∞ –∏–∑ Quest –æ–±—ä–µ–∫—Ç–∞
     */
    public ItemStack createQuestTicket(Quest quest) {
        return QuestTicketItem.createQuestTicket(quest);
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª–∞—Å—Å—ã
     */
    public String[] getAvailableClasses() {
        return PLAYER_CLASSES.clone();
    }
}