package io.github.apace100.origins.quest;

import io.github.apace100.origins.Origins;
import net.minecraft.item.ItemStack;
import net.minecraft.server.world.ServerWorld;

import java.util.*;
import java.util.concurrent.ConcurrentHashMap;

/**
 * –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ –∫–≤–µ—Å—Ç–æ–≤ —á–µ—Ä–µ–∑ API
 */
public class QuestApiManager {
    private static final QuestApiManager INSTANCE = new QuestApiManager();
    
    // –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ —Ç–∏–∫–∞—Ö (30 –º–∏–Ω—É—Ç = 30 * 60 * 20 = 36000 —Ç–∏–∫–æ–≤)
    private static final long UPDATE_INTERVAL_TICKS = 36000L;
    
    // –ö—ç—à –∫–≤–µ—Å—Ç–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª–∞—Å—Å–∞
    private final Map<String, List<Quest>> questCache = new ConcurrentHashMap<>();
    
    // –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª–∞—Å—Å–∞
    private final Map<String, Long> lastUpdateTime = new ConcurrentHashMap<>();
    
    // –§–ª–∞–≥ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
    private boolean apiAvailable = false;
    private long lastApiCheck = 0;
    private static final long API_CHECK_INTERVAL = 12000L; // –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç (12000 —Ç–∏–∫–æ–≤)
    private boolean isCheckingApi = false; // –§–ª–∞–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
    private boolean isLoadingQuests = false; // –§–ª–∞–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫ –∫–≤–µ—Å—Ç–æ–≤
    private long lastQuestLoadAttempt = 0; // –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–≤–µ—Å—Ç–æ–≤
    private static final long MIN_LOAD_INTERVAL = 1200L; // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ –∑–∞–≥—Ä—É–∑–∫–∏ (1 –º–∏–Ω—É—Ç–∞)
    
    // –ö–ª–∞—Å—Å—ã –∏–≥—Ä–æ–∫–æ–≤
    private static final String[] PLAYER_CLASSES = {
        "cook", "courier", "brewer", "blacksmith", "miner", "warrior"
    };
    
    private QuestApiManager() {}
    
    public static QuestApiManager getInstance() {
        return INSTANCE;
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É –∫–≤–µ—Å—Ç–æ–≤
     */
    public void initialize(ServerWorld world) {
        Origins.LOGGER.info("Initializing Quest API Manager...");
        
        checkApiAvailability(world);
    }
    
    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–æ—Å–∫—É –æ–±—ä—è–≤–ª–µ–Ω–∏–π –∫–≤–µ—Å—Ç–∞–º–∏ –∏–∑ –∫—ç—à–∞
     */
    public void updateBoard(ClassBountyBoardBlockEntity board) {
        String boardClass = board.getBoardClass();
        List<Quest> quests = questCache.get(boardClass);
        
        // –í–°–ï–ì–î–ê –æ—á–∏—â–∞–µ–º –¥–æ—Å–∫—É —Å–Ω–∞—á–∞–ª–∞
        board.getBounties().clear();
        
        if (quests != null && !quests.isEmpty()) {
            for (int i = 0; i < Math.min(quests.size(), 21); i++) {
                Quest quest = quests.get(i);
                ItemStack questTicket = QuestTicketItem.createQuestTicket(quest);
                if (!questTicket.isEmpty()) {
                    board.getBounties().setStack(i, questTicket);
                }
            }
            board.markDirty();
            Origins.LOGGER.info("Updated board for class: " + boardClass + " with " + quests.size() + " quests");
        } else {
            // –î–æ—Å–∫–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –ø—É—Å—Ç–æ–π –¥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–≤–µ—Å—Ç–æ–≤ –æ—Ç API
            Origins.LOGGER.info("Board for class " + boardClass + " remains empty - waiting for API response");
        }
    }
    
    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –∫–≤–µ—Å—Ç—ã –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏
     */
    public void tick(ServerWorld world) {
        long currentTime = world.getTime();
        
        if (currentTime - lastApiCheck > API_CHECK_INTERVAL) {
            checkApiAvailability(world);
            lastApiCheck = currentTime;
        }
        
        if (!apiAvailable) {
            return;
        }
        
        Long firstClassLastUpdate = lastUpdateTime.get(PLAYER_CLASSES[0]);
        if (firstClassLastUpdate == null || currentTime - firstClassLastUpdate >= UPDATE_INTERVAL_TICKS) {
            Origins.LOGGER.info("üîÑ Time to update all quests via optimized API...");
            loadAllQuests(world);
        }
    }
    
    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–≤–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∫–ª–∞—Å—Å–æ–≤ –æ–¥–Ω–∏–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
     */
    private void loadAllQuests(ServerWorld world) {
        long currentTime = world.getTime();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ–º –ª–∏ –º—ã —É–∂–µ –∫–≤–µ—Å—Ç—ã
        if (isLoadingQuests) {
            Origins.LOGGER.info("‚è≥ Already loading quests, skipping...");
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ –∑–∞–≥—Ä—É–∑–∫–∏
        if (currentTime - lastQuestLoadAttempt < MIN_LOAD_INTERVAL) {
            Origins.LOGGER.info("‚è≥ Too soon to load quests again, waiting...");
            return;
        }
        
        isLoadingQuests = true;
        lastQuestLoadAttempt = currentTime;
        
        Origins.LOGGER.info("üöÄ Loading quests for ALL classes with optimized API...");
        
        QuestApiChatLogger.logApiRequest(world.getServer(), "ALL CLASSES", 30); // 6 –∫–ª–∞—Å—Å–æ–≤ * 5 –∫–≤–µ—Å—Ç–æ–≤
        
        QuestApiClient.getAllQuests()
            .thenAccept(allQuests -> {
                try {
                    if (!allQuests.isEmpty()) {
                        long updateTime = world.getTime();
                        int totalQuests = 0;
                        
                        questCache.clear(); // –û—á–∏—â–∞–µ–º –∫—ç—à –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
                        for (String playerClass : PLAYER_CLASSES) {
                            List<Quest> classQuests = allQuests.getOrDefault(playerClass, new ArrayList<>());
                            questCache.put(playerClass, classQuests);
                            lastUpdateTime.put(playerClass, updateTime);
                            totalQuests += classQuests.size();
                            
                            Origins.LOGGER.info("üìã Loaded " + classQuests.size() + " quests for class: " + playerClass);
                            
                            // –î–µ—Ç–∞–ª—å–Ω—ã–π –ª–æ–≥ –∫–∞–∂–¥–æ–≥–æ –∫–≤–µ—Å—Ç–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                            for (int i = 0; i < classQuests.size(); i++) {
                                Quest quest = classQuests.get(i);
                                Origins.LOGGER.info("  Quest " + (i+1) + ": " + quest.getTitle() + " (ID: " + quest.getId() + ")");
                            }
                            
                            QuestApiChatLogger.logApiSuccess(world.getServer(), playerClass, classQuests.size());
                            updateBoardsForClass(playerClass, world);
                        }
                        
                        Origins.LOGGER.info("üéØ TOTAL: Loaded " + totalQuests + " quests for all classes!");
                        
                        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –∫–≤–µ—Å—Ç—ã –ø–æ—è–≤–∏–ª–∏—Å—å
                        QuestApiChatLogger.logQuestsAppeared(world.getServer(), totalQuests);
                    } else {
                        Origins.LOGGER.warn("‚ùå No quests received from optimized API");
                        QuestApiChatLogger.logApiError(world.getServer(), "ALL CLASSES", "–ù–µ –ø–æ–ª—É—á–µ–Ω–æ –∫–≤–µ—Å—Ç–æ–≤");
                    }
                } finally {
                    isLoadingQuests = false; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
                }
            })
            .exceptionally(throwable -> {
                try {
                    Origins.LOGGER.error("üî• Failed to load quests from optimized API", throwable);
                    QuestApiChatLogger.logApiError(world.getServer(), "ALL CLASSES", throwable.getMessage());
                } finally {
                    isLoadingQuests = false; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
                }
                return null;
            });
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Å–µ –¥–æ—Å–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞
     */
    private void updateBoardsForClass(String playerClass, ServerWorld world) {
        List<Quest> quests = questCache.get(playerClass);
        if (quests == null || quests.isEmpty()) {
            Origins.LOGGER.warn("No quests to update boards for class: " + playerClass);
            return;
        }
        
        Origins.LOGGER.info("Updating boards for class: " + playerClass + " with " + quests.size() + " quests");
        
        // –ü–æ–∏—Å–∫ –≤—Å–µ—Ö –¥–æ—Å–æ–∫ –≤ –º–∏—Ä–µ –∏ –∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        // –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º - –¥–æ—Å–∫–∏ –¥–æ–ª–∂–Ω—ã –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è —á–µ—Ä–µ–∑ –º–µ—Ç–æ–¥ updateBoard –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –Ω–∏–º
        for (Quest quest : quests) {
            Origins.LOGGER.info("  Available quest: " + quest.getTitle() + " (ID: " + quest.getId() + ")");
        }
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –∫–≤–µ—Å—Ç—ã –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞ –∏–∑ –∫—ç—à–∞
     */
    public List<Quest> getQuestsForClass(String playerClass) {
        return questCache.getOrDefault(playerClass, new ArrayList<>());
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –≤—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ —Ç–∏–∫–∞—Ö
     */
    public long getTimeUntilNextUpdate(String playerClass) {
        Long lastUpdate = lastUpdateTime.get(playerClass);
        if (lastUpdate == null) {
            return 0;
        }
        
        long timeSinceUpdate = System.currentTimeMillis() / 50 - lastUpdate;
        return Math.max(0, UPDATE_INTERVAL_TICKS - timeSinceUpdate);
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –≤—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –º–∏–Ω—É—Ç–∞—Ö
     */
    public int getMinutesUntilNextUpdate(String playerClass) {
        long ticksUntilUpdate = getTimeUntilNextUpdate(playerClass);
        return (int) (ticksUntilUpdate / (20 * 60));
    }
    
    /**
     * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∫–≤–µ—Å—Ç—ã –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞
     */
    public void forceUpdateClass(String playerClass, ServerWorld world) {
        Origins.LOGGER.info("Force updating quests for class: " + playerClass);
        loadAllQuests(world); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å –¥–ª—è –≤—Å–µ—Ö –∫–ª–∞—Å—Å–æ–≤
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
     */
    private void checkApiAvailability(ServerWorld world) {
        if (isCheckingApi) {
            Origins.LOGGER.info("‚è≥ API check already in progress, skipping...");
            return;
        }
        
        isCheckingApi = true;
        Origins.LOGGER.info("üîç Starting API availability check...");
        
        QuestApiClient.isApiAvailable()
            .thenAccept(available -> {
                isCheckingApi = false;
                
                if (available != apiAvailable) {
                    apiAvailable = available;
                    if (available) {
                        Origins.LOGGER.info("‚úÖ Quest API is now AVAILABLE!");
                        QuestApiChatLogger.logApiConnected(world.getServer());
                        QuestApiChatLogger.logQuestUpdate(world.getServer());
                        loadAllQuests(world);
                    } else {
                        Origins.LOGGER.warn("‚ùå Quest API is NOT AVAILABLE");
                        QuestApiChatLogger.logApiUnavailable(world.getServer());
                    }
                } else {
                    Origins.LOGGER.info("üîÑ API status unchanged: " + (available ? "AVAILABLE" : "UNAVAILABLE"));
                }
            })
            .exceptionally(throwable -> {
                isCheckingApi = false;
                if (apiAvailable) {
                    Origins.LOGGER.warn("üî• Quest API became unavailable due to exception: " + throwable.getMessage());
                    QuestApiChatLogger.logApiUnavailable(world.getServer());
                    apiAvailable = false;
                } else {
                    Origins.LOGGER.warn("üî• API check failed: " + throwable.getMessage());
                }
                return null;
            });
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
     */
    public boolean isApiAvailable() {
        return apiAvailable;
    }
    
    /**
     * –°–æ–∑–¥–∞–µ—Ç ItemStack –±–∏–ª–µ—Ç–∞ –∫–≤–µ—Å—Ç–∞ –∏–∑ Quest –æ–±—ä–µ–∫—Ç–∞
     */
    public ItemStack createQuestTicket(Quest quest) {
        return QuestTicketItem.createQuestTicket(quest);
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª–∞—Å—Å—ã
     */
    public String[] getAvailableClasses() {
        return PLAYER_CLASSES.clone();
    }
}