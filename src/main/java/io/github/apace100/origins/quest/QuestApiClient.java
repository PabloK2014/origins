package io.github.apace100.origins.quest;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import io.github.apace100.origins.Origins;

import java.io.IOException;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.CompletableFuture;

/**
 * –ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å FastAPI —Å–µ—Ä–≤–µ—Ä–æ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–≤–µ—Å—Ç–æ–≤
 */
public class QuestApiClient {
    private static final String API_BASE_URL = "http://localhost:8000";
    private static final HttpClient httpClient = HttpClient.newBuilder()
            .connectTimeout(Duration.ofSeconds(600)) // –£–≤–µ–ª–∏—á–µ–Ω —Ç–∞–π–º–∞—É—Ç –¥–æ 10 –º–∏–Ω—É—Ç
            .build();
    private static final Gson gson = new Gson();
    
    // –ö—ç—à –¥–ª—è –≤—Å–µ—Ö –∫–≤–µ—Å—Ç–æ–≤
    private static Map<String, List<Quest>> allQuestsCache = new HashMap<>();
    private static long lastAllQuestsFetch = 0;
    private static final long CACHE_DURATION = 30 * 60 * 1000; // 30 –º–∏–Ω—É—Ç –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
    
    // –§–ª–∞–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    private static volatile boolean isLoadingAllQuests = false;

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –∫–≤–µ—Å—Ç—ã –¥–ª—è –æ–¥–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞ —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π API —ç–Ω–¥–ø–æ–∏–Ω—Ç
     */
    public static CompletableFuture<List<Quest>> getQuestsForSingleClass(String playerClass, int questCount) {
        return CompletableFuture.supplyAsync(() -> {
            try {
                String url = API_BASE_URL + "/quests/" + playerClass + "?quest_count=" + questCount;
                Origins.LOGGER.info("üöÄ SINGLE CLASS API REQUEST: " + url);
                
                HttpRequest request = HttpRequest.newBuilder()
                        .uri(URI.create(url))
                        .timeout(Duration.ofSeconds(300)) // –¢–∞–π–º–∞—É—Ç 5 –º–∏–Ω—É—Ç –¥–ª—è –æ–¥–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞
                        .GET()
                        .build();
                
                HttpResponse<String> response = httpClient.send(request, HttpResponse.BodyHandlers.ofString());
                
                Origins.LOGGER.info("üì° API RESPONSE for " + playerClass + ": Status " + response.statusCode());
                
                if (response.statusCode() == 200) {
                    List<Quest> quests = parseQuestsFromJson(response.body());
                    Origins.LOGGER.info("‚úÖ API SUCCESS for " + playerClass + ": –ü–æ–ª—É—á–µ–Ω–æ " + quests.size() + " –∫–≤–µ—Å—Ç–æ–≤!");
                    return quests;
                } else {
                    Origins.LOGGER.error("‚ùå API ERROR for " + playerClass + ": Status " + response.statusCode());
                    Origins.LOGGER.error("Response body: " + response.body());
                    return new ArrayList<>();
                }
                
            } catch (IOException | InterruptedException e) {
                Origins.LOGGER.error("üî• API EXCEPTION for " + playerClass + ": " + e.getMessage());
                return new ArrayList<>();
            }
        });
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –∫–≤–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∫–ª–∞—Å—Å–æ–≤ —á–µ—Ä–µ–∑ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã —Å –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—ã–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –¥–æ—Å–æ–∫
     */
    public static CompletableFuture<Map<String, List<Quest>>> getAllQuestsSeparately(int questCount, QuestApiManager manager) {
        String[] classes = {"cook", "courier", "brewer", "blacksmith", "miner", "warrior"};
        
        Origins.LOGGER.info("üöÄ Starting " + classes.length + " separate API requests for quest generation...");
        
        // –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ CompletableFuture –¥–ª—è –≤—Å–µ—Ö –∫–ª–∞—Å—Å–æ–≤
        List<CompletableFuture<Map.Entry<String, List<Quest>>>> futures = new ArrayList<>();
        
        for (String playerClass : classes) {
            CompletableFuture<Map.Entry<String, List<Quest>>> future = getQuestsForSingleClass(playerClass, questCount)
                .thenApply(quests -> {
                    // –ù–ï–ú–ï–î–õ–ï–ù–ù–û –æ–±–Ω–æ–≤–ª—è–µ–º –¥–æ—Å–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ –∫–ª–∞—Å—Å–∞, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –ø–æ–ª—É—á–∏–ª–∏ –∫–≤–µ—Å—Ç—ã
                    if (!quests.isEmpty() && manager != null) {
                        manager.updateClassImmediately(playerClass, quests);
                    }
                    return Map.entry(playerClass, quests);
                });
            futures.add(future);
        }
        
        // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        return CompletableFuture.allOf(futures.toArray(new CompletableFuture[0]))
            .thenApply(v -> {
                Map<String, List<Quest>> allQuests = new HashMap<>();
                
                for (CompletableFuture<Map.Entry<String, List<Quest>>> future : futures) {
                    try {
                        Map.Entry<String, List<Quest>> entry = future.get();
                        allQuests.put(entry.getKey(), entry.getValue());
                    } catch (Exception e) {
                        Origins.LOGGER.error("üî• Failed to get result for one of the classes: " + e.getMessage());
                    }
                }
                
                int totalQuests = allQuests.values().stream().mapToInt(List::size).sum();
                Origins.LOGGER.info("üéØ SEPARATE REQUESTS COMPLETED: " + totalQuests + " total quests loaded");
                
                return allQuests;
            });
    }

    /**
     * –ü–æ–≤—Ç–æ—Ä–Ω–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∫–≤–µ—Å—Ç—ã –¥–ª—è –∫–ª–∞—Å—Å–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ –∫–≤–µ—Å—Ç—ã
     */
    public static CompletableFuture<Map<String, List<Quest>>> retryMissingClasses(Map<String, List<Quest>> currentQuests, int questCount) {
        String[] classes = {"cook", "courier", "brewer", "blacksmith", "miner", "warrior"};
        List<String> missingClasses = new ArrayList<>();
        
        // –ù–∞—Ö–æ–¥–∏–º –∫–ª–∞—Å—Å—ã –±–µ–∑ –∫–≤–µ—Å—Ç–æ–≤
        for (String playerClass : classes) {
            List<Quest> classQuests = currentQuests.getOrDefault(playerClass, new ArrayList<>());
            if (classQuests.isEmpty()) {
                missingClasses.add(playerClass);
            }
        }
        
        if (missingClasses.isEmpty()) {
            Origins.LOGGER.info("‚úÖ All classes have quests, no retry needed");
            return CompletableFuture.completedFuture(currentQuests);
        }
        
        Origins.LOGGER.info("üîÑ Retrying quest generation for missing classes: " + missingClasses);
        
        // –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –∫–ª–∞—Å—Å–æ–≤
        List<CompletableFuture<Map.Entry<String, List<Quest>>>> retryFutures = new ArrayList<>();
        
        for (String playerClass : missingClasses) {
            CompletableFuture<Map.Entry<String, List<Quest>>> future = getQuestsForSingleClass(playerClass, questCount)
                .thenApply(quests -> Map.entry(playerClass, quests));
            retryFutures.add(future);
        }
        
        // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        return CompletableFuture.allOf(retryFutures.toArray(new CompletableFuture[0]))
            .thenApply(v -> {
                Map<String, List<Quest>> updatedQuests = new HashMap<>(currentQuests);
                
                for (CompletableFuture<Map.Entry<String, List<Quest>>> future : retryFutures) {
                    try {
                        Map.Entry<String, List<Quest>> entry = future.get();
                        if (!entry.getValue().isEmpty()) {
                            updatedQuests.put(entry.getKey(), entry.getValue());
                            Origins.LOGGER.info("‚úÖ Retry successful for " + entry.getKey() + ": " + entry.getValue().size() + " quests");
                        } else {
                            Origins.LOGGER.warn("‚ùå Retry failed for " + entry.getKey() + ": no quests received");
                        }
                    } catch (Exception e) {
                        Origins.LOGGER.error("üî• Retry failed for one of the classes: " + e.getMessage());
                    }
                }
                
                return updatedQuests;
            });
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∫–≤–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∫–ª–∞—Å—Å–æ–≤ –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º (–°–¢–ê–†–ê–Ø –í–ï–†–°–ò–Ø - –æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
     */
    public static CompletableFuture<Map<String, List<Quest>>> getAllQuests() {
        return CompletableFuture.supplyAsync(() -> {
            if (isLoadingAllQuests) {
                Origins.LOGGER.info("‚è≥ Already loading all quests, waiting...");
                while (isLoadingAllQuests) {
                    try {
                        Thread.sleep(1000);
                    } catch (InterruptedException e) {
                        Thread.currentThread().interrupt();
                        return new HashMap<>();
                    }
                }
                return allQuestsCache;
            }
            
            isLoadingAllQuests = true;
            
            try {
                String url = API_BASE_URL + "/quests/all";
                Origins.LOGGER.info("üöÄ OPTIMIZED API REQUEST: " + url);
                
                HttpRequest request = HttpRequest.newBuilder()
                        .uri(URI.create(url))
                        .timeout(Duration.ofSeconds(600)) // –¢–∞–π–º–∞—É—Ç 10 –º–∏–Ω—É—Ç
                        .GET()
                        .build();
                
                HttpResponse<String> response = httpClient.send(request, HttpResponse.BodyHandlers.ofString());
                
                Origins.LOGGER.info("üì° API RESPONSE: Status " + response.statusCode());
                
                if (response.statusCode() == 200) {
                    Map<String, List<Quest>> allQuests = parseAllQuestsFromJson(response.body());
                    Origins.LOGGER.info("‚úÖ API SUCCESS: –ü–æ–ª—É—á–µ–Ω–æ –∫–≤–µ—Å—Ç–æ–≤ –¥–ª—è –≤—Å–µ—Ö –∫–ª–∞—Å—Å–æ–≤!");
                    
                    allQuestsCache = allQuests;
                    lastAllQuestsFetch = System.currentTimeMillis();
                    
                    return allQuests;
                } else {
                    Origins.LOGGER.error("‚ùå API ERROR: Status " + response.statusCode());
                    Origins.LOGGER.error("Response body: " + response.body());
                    return new HashMap<>();
                }
                
            } catch (IOException | InterruptedException e) {
                Origins.LOGGER.error("üî• API EXCEPTION: Failed to fetch all quests: " + e.getMessage());
                return new HashMap<>();
            } finally {
                isLoadingAllQuests = false;
            }
        });
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –∫–≤–µ—Å—Ç—ã –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∫—ç—à –∏–ª–∏ –Ω–æ–≤—ã–π API)
     */
    public static CompletableFuture<List<Quest>> getQuestsForClass(String playerClass, int questCount) {
        return CompletableFuture.supplyAsync(() -> {
            if (allQuestsCache.containsKey(playerClass) && 
                System.currentTimeMillis() - lastAllQuestsFetch < CACHE_DURATION) {
                Origins.LOGGER.info("üì¶ CACHE HIT: –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–≤–µ—Å—Ç—ã –¥–ª—è " + playerClass);
                return allQuestsCache.get(playerClass);
            }
            
            Origins.LOGGER.info("üîÑ CACHE MISS: –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –∫–≤–µ—Å—Ç—ã —á–µ—Ä–µ–∑ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π API");
            try {
                Map<String, List<Quest>> allQuests = getAllQuests().get();
                return allQuests.getOrDefault(playerClass, new ArrayList<>());
            } catch (Exception e) {
                Origins.LOGGER.error("‚ùå Failed to get quests for class " + playerClass + ": " + e.getMessage());
                return new ArrayList<>();
            }
        });
    }
    
    /**
     * –ü–∞—Ä—Å–∏—Ç JSON –æ—Ç–≤–µ—Ç —Å –∫–≤–µ—Å—Ç–∞–º–∏ –¥–ª—è –≤—Å–µ—Ö –∫–ª–∞—Å—Å–æ–≤ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
     */
    private static Map<String, List<Quest>> parseAllQuestsFromJson(String jsonResponse) {
        Map<String, List<Quest>> allQuests = new HashMap<>();
        String[] classes = {"cook", "courier", "brewer", "blacksmith", "miner", "warrior"};
        
        Origins.LOGGER.info("üîç [QuestApiClient] –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ JSON –æ—Ç–≤–µ—Ç–∞ –¥–ª–∏–Ω–æ–π: " + jsonResponse.length() + " —Å–∏–º–≤–æ–ª–æ–≤");
        
        // –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è JSON
        if (jsonResponse == null || jsonResponse.trim().isEmpty()) {
            Origins.LOGGER.error("‚ùå [QuestApiClient] –ü—É—Å—Ç–æ–π JSON –æ—Ç–≤–µ—Ç");
            return initializeEmptyQuests(classes);
        }
        
        try {
            // –ü–æ–ø—ã—Ç–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ JSON –æ–±—ä–µ–∫—Ç–∞
            JsonObject responseObj;
            try {
                responseObj = JsonParser.parseString(jsonResponse).getAsJsonObject();
                Origins.LOGGER.info("‚úÖ [QuestApiClient] JSON —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω –≤ –æ–±—ä–µ–∫—Ç");
            } catch (Exception jsonParseError) {
                Origins.LOGGER.error("üî• [QuestApiClient] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: " + jsonParseError.getMessage());
                Origins.LOGGER.error("üî• [QuestApiClient] –ü—Ä–æ–±–ª–µ–º–Ω—ã–π JSON: " + jsonResponse.substring(0, Math.min(200, jsonResponse.length())));
                return initializeEmptyQuests(classes);
            }
            
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –∫–ª–∞—Å—Å –æ—Ç–¥–µ–ª—å–Ω–æ
            for (String className : classes) {
                List<Quest> classQuests = new ArrayList<>();
                Origins.LOGGER.info("üîç [QuestApiClient] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–ª–∞—Å—Å: " + className);
                
                try {
                    if (responseObj.has(className)) {
                        JsonArray questsArray = responseObj.getAsJsonArray(className);
                        Origins.LOGGER.info("üìã [QuestApiClient] –ù–∞–π–¥–µ–Ω –º–∞—Å—Å–∏–≤ –∫–≤–µ—Å—Ç–æ–≤ –¥–ª—è " + className + " —Ä–∞–∑–º–µ—Ä–æ–º: " + questsArray.size());
                        
                        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –∫–≤–µ—Å—Ç –æ—Ç–¥–µ–ª—å–Ω–æ
                        for (int i = 0; i < questsArray.size(); i++) {
                            try {
                                JsonObject questObj = questsArray.get(i).getAsJsonObject();
                                Origins.LOGGER.info("üîç [QuestApiClient] –ü–∞—Ä—Å–∏–º –∫–≤–µ—Å—Ç " + (i+1) + " –¥–ª—è " + className);
                                
                                Quest quest = parseQuestFromJsonObjectSafely(questObj, className, i+1);
                                if (quest != null) {
                                    classQuests.add(quest);
                                    Origins.LOGGER.info("‚úÖ [QuestApiClient] –ö–≤–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: " + quest.getTitle());
                                } else {
                                    Origins.LOGGER.warn("‚ùå [QuestApiClient] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–≤–µ—Å—Ç " + (i+1) + " –¥–ª—è " + className + " - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º");
                                }
                            } catch (Exception questError) {
                                Origins.LOGGER.warn("‚ùå [QuestApiClient] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–≤–µ—Å—Ç–∞ " + (i+1) + " –¥–ª—è " + className + ": " + questError.getMessage());
                                // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–≤–µ—Å—Ç–æ–≤
                            }
                        }
                    } else {
                        Origins.LOGGER.warn("‚ùå [QuestApiClient] –ö–ª–∞—Å—Å " + className + " –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ JSON –æ—Ç–≤–µ—Ç–µ");
                    }
                } catch (Exception classError) {
                    Origins.LOGGER.error("‚ùå [QuestApiClient] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–ª–∞—Å—Å–∞ " + className + ": " + classError.getMessage());
                    // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤
                }
                
                allQuests.put(className, classQuests);
                Origins.LOGGER.info("üìä [QuestApiClient] –ò—Ç–æ–≥–æ –¥–ª—è " + className + ": " + classQuests.size() + " –∫–≤–µ—Å—Ç–æ–≤");
            }
            
        } catch (Exception e) {
            Origins.LOGGER.error("üî• [QuestApiClient] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ JSON", e);
            Origins.LOGGER.error("üî• [QuestApiClient] JSON —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ: " + jsonResponse.substring(0, Math.min(500, jsonResponse.length())));
            
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —á–∞—Å—Ç–∏—á–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–º–µ—Å—Ç–æ –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–ª–∞
            if (allQuests.isEmpty()) {
                return initializeEmptyQuests(classes);
            }
        }
        
        int totalQuests = allQuests.values().stream().mapToInt(List::size).sum();
        Origins.LOGGER.info("üéØ [QuestApiClient] –ò–¢–û–ì–û –†–ê–°–ü–ê–†–°–ï–ù–û: " + totalQuests + " –∫–≤–µ—Å—Ç–æ–≤");
        
        return allQuests;
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—É—Å—Ç—ã–µ —Å–ø–∏—Å–∫–∏ –∫–≤–µ—Å—Ç–æ–≤ –¥–ª—è –≤—Å–µ—Ö –∫–ª–∞—Å—Å–æ–≤
     */
    private static Map<String, List<Quest>> initializeEmptyQuests(String[] classes) {
        Map<String, List<Quest>> emptyQuests = new HashMap<>();
        for (String className : classes) {
            emptyQuests.put(className, new ArrayList<>());
        }
        return emptyQuests;
    }
    
    /**
     * –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–∞—Ä—Å–∏—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π –∫–≤–µ—Å—Ç –∏–∑ JSON –æ–±—ä–µ–∫—Ç–∞ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
     */
    private static Quest parseQuestFromJsonObjectSafely(JsonObject questObj, String className, int questIndex) {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
            if (!questObj.has("id") || !questObj.has("playerClass") || !questObj.has("level") || 
                !questObj.has("title") || !questObj.has("objective") || !questObj.has("timeLimit") || 
                !questObj.has("reward")) {
                Origins.LOGGER.warn("‚ùå [QuestApiClient] –ö–≤–µ—Å—Ç " + questIndex + " –¥–ª—è " + className + " –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ—Ö –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π");
                return null;
            }
            
            String id = questObj.get("id").getAsString();
            String playerClass = questObj.get("playerClass").getAsString();
            int level = questObj.get("level").getAsInt();
            String title = questObj.get("title").getAsString();
            String description = ""; // –£–±–∏—Ä–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ description –∏–∑ API
            int timeLimit = questObj.get("timeLimit").getAsInt();
            
            // –í–∞–ª–∏–¥–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
            if (level < 1 || level > 3) {
                Origins.LOGGER.warn("‚ùå [QuestApiClient] –ö–≤–µ—Å—Ç " + questIndex + " –¥–ª—è " + className + " –∏–º–µ–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å: " + level);
                return null;
            }
            
            if (timeLimit < 20 || timeLimit > 50) {
                Origins.LOGGER.warn("‚ùå [QuestApiClient] –ö–≤–µ—Å—Ç " + questIndex + " –¥–ª—è " + className + " –∏–º–µ–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π timeLimit: " + timeLimit);
                return null;
            }
            
            // –ü–∞—Ä—Å–∏–º objective
            JsonObject objectiveObj = questObj.getAsJsonObject("objective");
            if (!objectiveObj.has("type") || !objectiveObj.has("target") || !objectiveObj.has("amount")) {
                Origins.LOGGER.warn("‚ùå [QuestApiClient] –ö–≤–µ—Å—Ç " + questIndex + " –¥–ª—è " + className + " –∏–º–µ–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π objective");
                return null;
            }
            
            String objectiveType = objectiveObj.get("type").getAsString();
            String target = objectiveObj.get("target").getAsString();
            int amount = objectiveObj.get("amount").getAsInt();
            
            // –í–∞–ª–∏–¥–∞—Ü–∏—è objective
            if (amount < 1 || amount > 20) {
                Origins.LOGGER.warn("‚ùå [QuestApiClient] –ö–≤–µ—Å—Ç " + questIndex + " –¥–ª—è " + className + " –∏–º–µ–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: " + amount);
                return null;
            }
            
            QuestObjective.ObjectiveType objType = parseObjectiveType(objectiveType);
            QuestObjective objective = new QuestObjective(objType, target, amount);
            
            // –ü–∞—Ä—Å–∏–º reward
            JsonObject rewardObj = questObj.getAsJsonObject("reward");
            if (!rewardObj.has("type") || !rewardObj.has("tier") || !rewardObj.has("experience")) {
                Origins.LOGGER.warn("‚ùå [QuestApiClient] –ö–≤–µ—Å—Ç " + questIndex + " –¥–ª—è " + className + " –∏–º–µ–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π reward");
                return null;
            }
            
            String rewardType = rewardObj.get("type").getAsString();
            int tier = rewardObj.get("tier").getAsInt();
            int experience = rewardObj.get("experience").getAsInt();
            
            // –í–∞–ª–∏–¥–∞—Ü–∏—è reward
            if (tier < 1 || tier > 3) {
                Origins.LOGGER.warn("‚ùå [QuestApiClient] –ö–≤–µ—Å—Ç " + questIndex + " –¥–ª—è " + className + " –∏–º–µ–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π tier: " + tier);
                return null;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ experience —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç tier
            int expectedExperience = switch (tier) {
                case 1 -> 500;
                case 2 -> 1000;
                case 3 -> 1500;
                default -> 500;
            };
            
            if (experience != expectedExperience) {
                Origins.LOGGER.warn("‚ùå [QuestApiClient] –ö–≤–µ—Å—Ç " + questIndex + " –¥–ª—è " + className + " –∏–º–µ–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π experience: " + experience + ", –æ–∂–∏–¥–∞–ª—Å—è: " + expectedExperience);
                return null;
            }
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º QuestReward.fromJson –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å items
            QuestReward reward = QuestReward.fromJson(rewardObj);
            
            Quest quest = new Quest(id, playerClass, level, title, description, objective, timeLimit, reward);
            Origins.LOGGER.info("‚úÖ [QuestApiClient] Quest —Å–æ–∑–¥–∞–Ω: " + quest.getTitle() + " (ID: " + quest.getId() + ")");
            
            return quest;
            
        } catch (Exception e) {
            Origins.LOGGER.error("üî• [QuestApiClient] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –∫–≤–µ—Å—Ç–∞ " + questIndex + " –¥–ª—è " + className, e);
            Origins.LOGGER.error("üî• [QuestApiClient] –ü—Ä–æ–±–ª–µ–º–Ω—ã–π JSON: " + questObj.toString());
            return null;
        }
    }

    /**
     * –ü–∞—Ä—Å–∏—Ç JSON –æ—Ç–≤–µ—Ç –æ—Ç API –≤ —Å–ø–∏—Å–æ–∫ –∫–≤–µ—Å—Ç–æ–≤ (—Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
     */
    private static List<Quest> parseQuestsFromJson(String jsonResponse) {
        List<Quest> quests = new ArrayList<>();
        
        try {
            JsonObject responseObj = JsonParser.parseString(jsonResponse).getAsJsonObject();
            JsonArray questsArray = responseObj.getAsJsonArray("quests");
            
            for (int i = 0; i < questsArray.size(); i++) {
                JsonObject questObj = questsArray.get(i).getAsJsonObject();
                Quest quest = parseQuestFromJsonObject(questObj);
                if (quest != null) {
                    quests.add(quest);
                }
            }
            
        } catch (Exception e) {
            Origins.LOGGER.error("Failed to parse quests from JSON response", e);
        }
        
        return quests;
    }
    
    /**
     * –ü–∞—Ä—Å–∏—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π –∫–≤–µ—Å—Ç –∏–∑ JSON –æ–±—ä–µ–∫—Ç–∞
     */
    private static Quest parseQuestFromJsonObject(JsonObject questObj) {
        try {
            String id = questObj.get("id").getAsString();
            String playerClass = questObj.get("playerClass").getAsString();
            int level = questObj.get("level").getAsInt();
            String title = questObj.get("title").getAsString();
            String description = ""; // –£–±–∏—Ä–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ description –∏–∑ API
            int timeLimit = questObj.get("timeLimit").getAsInt();
            
            JsonObject objectiveObj = questObj.getAsJsonObject("objective");
            String objectiveType = objectiveObj.get("type").getAsString();
            String target = objectiveObj.get("target").getAsString();
            int amount = objectiveObj.get("amount").getAsInt();
            
            QuestObjective.ObjectiveType objType = parseObjectiveType(objectiveType);
            QuestObjective objective = new QuestObjective(objType, target, amount);
            
            JsonObject rewardObj = questObj.getAsJsonObject("reward");
            String rewardType = rewardObj.get("type").getAsString();
            int tier = rewardObj.get("tier").getAsInt();
            int experience = rewardObj.get("experience").getAsInt();
            
            QuestReward.RewardType rewType = parseRewardType(rewardType);
            QuestReward reward = new QuestReward(rewType, tier, experience);
            
            Quest quest = new Quest(id, playerClass, level, title, description, objective, timeLimit, reward);
            Origins.LOGGER.info("‚úÖ [QuestApiClient] Quest —Å–æ–∑–¥–∞–Ω: " + quest.getTitle() + " (ID: " + quest.getId() + ")");
            
            return quest;
            
        } catch (Exception e) {
            Origins.LOGGER.error("üî• [QuestApiClient] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –∫–≤–µ—Å—Ç–∞ –∏–∑ JSON", e);
            Origins.LOGGER.error("üî• [QuestApiClient] –ü—Ä–æ–±–ª–µ–º–Ω—ã–π JSON: " + questObj.toString());
            return null;
        }
    }
    
    /**
     * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫—É —Ç–∏–ø–∞ —Ü–µ–ª–∏ –≤ enum
     */
    private static QuestObjective.ObjectiveType parseObjectiveType(String type) {
        switch (type.toLowerCase()) {
            case "collect":
                return QuestObjective.ObjectiveType.COLLECT;
            case "craft":
                return QuestObjective.ObjectiveType.CRAFT;
            case "kill":
                return QuestObjective.ObjectiveType.KILL;
            case "mine":
                return QuestObjective.ObjectiveType.COLLECT;
            default:
                return QuestObjective.ObjectiveType.COLLECT;
        }
    }
    
    /**
     * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫—É —Ç–∏–ø–∞ –Ω–∞–≥—Ä–∞–¥—ã –≤ enum
     */
    private static QuestReward.RewardType parseRewardType(String type) {
        switch (type.toLowerCase()) {
            case "skill_point_token":
                return QuestReward.RewardType.SKILL_POINT_TOKEN;
            case "experience":
                return QuestReward.RewardType.EXPERIENCE;
            case "item":
                return QuestReward.RewardType.ITEM;
            default:
                return QuestReward.RewardType.SKILL_POINT_TOKEN;
        }
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
     */
    public static CompletableFuture<Boolean> isApiAvailable() {
        return CompletableFuture.supplyAsync(() -> {
            try {
                HttpRequest request = HttpRequest.newBuilder()
                        .uri(URI.create(API_BASE_URL + "/"))
                        .timeout(Duration.ofSeconds(10))
                        .GET()
                        .build();
                
                HttpResponse<String> response = httpClient.send(request, HttpResponse.BodyHandlers.ofString());
                
                boolean isAvailable = response.statusCode() == 200;
                Origins.LOGGER.info("üîç API Health Check: " + (isAvailable ? "‚úÖ AVAILABLE" : "‚ùå UNAVAILABLE") + " (Status: " + response.statusCode() + ")");
                
                return isAvailable;
                
            } catch (Exception e) {
                Origins.LOGGER.warn("üîç API Health Check: ‚ùå EXCEPTION - " + e.getMessage());
                return false;
            }
        });
    }
}