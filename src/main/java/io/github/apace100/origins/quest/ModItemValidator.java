package io.github.apace100.origins.quest;

import io.github.apace100.origins.Origins;
import net.minecraft.item.Item;
import net.minecraft.item.ItemStack;
import net.minecraft.item.Items;
import net.minecraft.registry.Registries;
import net.minecraft.util.Identifier;

import java.util.HashMap;
import java.util.Map;

/**
 * –£—Ç–∏–ª–∏—Ç–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–æ–¥–æ–≤—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ –∫–≤–µ—Å—Ç–∞—Ö
 */
public class ModItemValidator {
    
    // –ö—ç—à –¥–ª—è –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    private static final Map<String, Item> itemCache = new HashMap<>();
    
    // Fallback –ø—Ä–µ–¥–º–µ—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    private static final Map<String, String> FALLBACK_ITEMS = new HashMap<>();
    
    static {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º fallback –ø—Ä–µ–¥–º–µ—Ç—ã
        FALLBACK_ITEMS.put("food", "minecraft:bread");
        FALLBACK_ITEMS.put("drink", "minecraft:milk_bucket");
        FALLBACK_ITEMS.put("tool", "minecraft:iron_pickaxe");
        FALLBACK_ITEMS.put("weapon", "minecraft:iron_sword");
        FALLBACK_ITEMS.put("armor", "minecraft:iron_chestplate");
        FALLBACK_ITEMS.put("material", "minecraft:iron_ingot");
        FALLBACK_ITEMS.put("block", "minecraft:stone");
        FALLBACK_ITEMS.put("default", "minecraft:stick");
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø—Ä–µ–¥–º–µ—Ç —Å –¥–∞–Ω–Ω—ã–º ID
     */
    public static boolean isValidItem(String itemId) {
        if (itemId == null || itemId.isEmpty()) {
            return false;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        if (itemCache.containsKey(itemId)) {
            return itemCache.get(itemId) != Items.AIR;
        }
        
        try {
            Identifier identifier = new Identifier(itemId);
            Item item = Registries.ITEM.get(identifier);
            
            // –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            itemCache.put(itemId, item);
            
            boolean isValid = item != Items.AIR;
            if (!isValid) {
                Origins.LOGGER.warn("üîç [ModItemValidator] –ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: " + itemId);
            }
            
            return isValid;
        } catch (Exception e) {
            Origins.LOGGER.error("üî• [ModItemValidator] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–µ–¥–º–µ—Ç–∞ " + itemId + ": " + e.getMessage());
            itemCache.put(itemId, Items.AIR);
            return false;
        }
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–µ–¥–º–µ—Ç –ø–æ ID –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç fallback
     */
    public static Item getItemOrFallback(String itemId) {
        if (isValidItem(itemId)) {
            return itemCache.get(itemId);
        }
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º fallback –ø—Ä–µ–¥–º–µ—Ç
        String fallbackId = getFallbackItemId(itemId);
        Origins.LOGGER.info("üîÑ [ModItemValidator] –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –¥–ª—è " + itemId + " -> " + fallbackId);
        
        try {
            return Registries.ITEM.get(new Identifier(fallbackId));
        } catch (Exception e) {
            Origins.LOGGER.error("üî• [ModItemValidator] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ fallback –ø—Ä–µ–¥–º–µ—Ç–∞: " + e.getMessage());
            return Items.STICK; // –ü–æ—Å–ª–µ–¥–Ω–∏–π fallback
        }
    }
    
    /**
     * –°–æ–∑–¥–∞–µ—Ç ItemStack —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –º–æ–¥–æ–≤—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
     */
    public static ItemStack createValidItemStack(String itemId, int count) {
        Item item = getItemOrFallback(itemId);
        return new ItemStack(item, count);
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç fallback ID –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è/–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
     */
    private static String getFallbackItemId(String itemId) {
        if (itemId == null) return FALLBACK_ITEMS.get("default");
        
        String lowerItemId = itemId.toLowerCase();
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –ø—Ä–µ–¥–º–µ—Ç–∞
        if (lowerItemId.contains("food") || lowerItemId.contains("bread") || lowerItemId.contains("cake") || 
            lowerItemId.contains("soup") || lowerItemId.contains("stew") || lowerItemId.contains("pie")) {
            return FALLBACK_ITEMS.get("food");
        }
        
        if (lowerItemId.contains("drink") || lowerItemId.contains("tea") || lowerItemId.contains("coffee") || 
            lowerItemId.contains("wine") || lowerItemId.contains("beer") || lowerItemId.contains("milk")) {
            return FALLBACK_ITEMS.get("drink");
        }
        
        if (lowerItemId.contains("sword") || lowerItemId.contains("bow") || lowerItemId.contains("crossbow")) {
            return FALLBACK_ITEMS.get("weapon");
        }
        
        if (lowerItemId.contains("pickaxe") || lowerItemId.contains("axe") || lowerItemId.contains("shovel") || 
            lowerItemId.contains("hoe") || lowerItemId.contains("tool")) {
            return FALLBACK_ITEMS.get("tool");
        }
        
        if (lowerItemId.contains("helmet") || lowerItemId.contains("chestplate") || lowerItemId.contains("leggings") || 
            lowerItemId.contains("boots") || lowerItemId.contains("armor")) {
            return FALLBACK_ITEMS.get("armor");
        }
        
        if (lowerItemId.contains("ingot") || lowerItemId.contains("ore") || lowerItemId.contains("gem") || 
            lowerItemId.contains("dust") || lowerItemId.contains("nugget")) {
            return FALLBACK_ITEMS.get("material");
        }
        
        if (lowerItemId.contains("block") || lowerItemId.contains("stone") || lowerItemId.contains("wood")) {
            return FALLBACK_ITEMS.get("block");
        }
        
        return FALLBACK_ITEMS.get("default");
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ —Å fallback
     */
    public static String getItemDisplayName(String itemId) {
        if (isValidItem(itemId)) {
            try {
                Item item = itemCache.get(itemId);
                return item.getName().getString();
            } catch (Exception e) {
                Origins.LOGGER.warn("üîç [ModItemValidator] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è " + itemId);
            }
        }
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ ID
        return formatItemIdAsName(itemId);
    }
    
    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç ID –ø—Ä–µ–¥–º–µ—Ç–∞ –∫–∞–∫ —á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
     */
    private static String formatItemIdAsName(String itemId) {
        if (itemId == null) return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç";
        
        // –£–±–∏—Ä–∞–µ–º namespace (minecraft:, create:, etc.)
        String name = itemId.contains(":") ? itemId.split(":", 2)[1] : itemId;
        
        // –ó–∞–º–µ–Ω—è–µ–º –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è –Ω–∞ –ø—Ä–æ–±–µ–ª—ã –∏ –¥–µ–ª–∞–µ–º –ø–µ—Ä–≤—É—é –±—É–∫–≤—É –∑–∞–≥–ª–∞–≤–Ω–æ–π
        String[] parts = name.split("_");
        StringBuilder result = new StringBuilder();
        
        for (String part : parts) {
            if (result.length() > 0) result.append(" ");
            if (!part.isEmpty()) {
                result.append(part.substring(0, 1).toUpperCase())
                      .append(part.substring(1).toLowerCase());
            }
        }
        
        return result.toString();
    }
    
    /**
     * –û—á–∏—â–∞–µ—Ç –∫—ç—à –ø—Ä–µ–¥–º–µ—Ç–æ–≤ (–¥–ª—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏)
     */
    public static void clearCache() {
        itemCache.clear();
        Origins.LOGGER.info("üóëÔ∏è [ModItemValidator] –ö—ç—à –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –æ—á–∏—â–µ–Ω");
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞
     */
    public static String getCacheStats() {
        int validItems = 0;
        int invalidItems = 0;
        
        for (Item item : itemCache.values()) {
            if (item == Items.AIR) {
                invalidItems++;
            } else {
                validItems++;
            }
        }
        
        return String.format("–ö—ç—à –ø—Ä–µ–¥–º–µ—Ç–æ–≤: %d –≤–∞–ª–∏–¥–Ω—ã—Ö, %d –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö, –≤—Å–µ–≥–æ %d", 
                           validItems, invalidItems, itemCache.size());
    }
}